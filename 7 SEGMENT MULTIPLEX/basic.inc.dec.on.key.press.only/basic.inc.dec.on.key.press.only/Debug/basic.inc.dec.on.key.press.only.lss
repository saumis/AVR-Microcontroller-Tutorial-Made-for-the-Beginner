
basic.inc.dec.on.key.press.only.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000154  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00000154  000001c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000020  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001f4  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000fc  00000000  00000000  00000420  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000186  00000000  00000000  0000051c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000034  00000000  00000000  000006a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001b6  00000000  00000000  000006d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000028b  00000000  00000000  0000088e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  00000b19  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e4 e5       	ldi	r30, 0x54	; 84
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a4 37       	cpi	r26, 0x74	; 116
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>
  48:	02 d0       	rcall	.+4      	; 0x4e <main>
  4a:	82 c0       	rjmp	.+260    	; 0x150 <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <main>:

#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
  4e:	cf 93       	push	r28
  50:	df 93       	push	r29
  52:	cd b7       	in	r28, 0x3d	; 61
  54:	de b7       	in	r29, 0x3e	; 62
  56:	64 97       	sbiw	r28, 0x14	; 20
  58:	0f b6       	in	r0, 0x3f	; 63
  5a:	f8 94       	cli
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	0f be       	out	0x3f, r0	; 63
  60:	cd bf       	out	0x3d, r28	; 61
	DDRB|=0x03;		
  62:	87 b3       	in	r24, 0x17	; 23
  64:	83 60       	ori	r24, 0x03	; 3
  66:	87 bb       	out	0x17, r24	; 23
	// 0x03 means 0000 0011 and it enables 1st and 2nd pin as o/p pin(coz 1 means o/p only remaining pins remains unchanged due to use of ORing function. as ORing means addition
	DDRB&=0xfb;
  68:	ba 98       	cbi	0x17, 2	; 23
	// 0xfb means 1111 1011 and it enables 3rd pin as i/p pin only remaining pins remains unchanged due to use of ANDing function. as ANDing means product
	DDRD=0xff;
  6a:	8f ef       	ldi	r24, 0xFF	; 255
  6c:	81 bb       	out	0x11, r24	; 17
	int i=0,j=0;
	int a[10]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f};		// values in array a[10]={0,1,2,3,4,5,6,7,8,9}
  6e:	84 e1       	ldi	r24, 0x14	; 20
  70:	e0 e6       	ldi	r30, 0x60	; 96
  72:	f0 e0       	ldi	r31, 0x00	; 0
  74:	de 01       	movw	r26, r28
  76:	11 96       	adiw	r26, 0x01	; 1
  78:	01 90       	ld	r0, Z+
  7a:	0d 92       	st	X+, r0
  7c:	8a 95       	dec	r24
  7e:	e1 f7       	brne	.-8      	; 0x78 <main+0x2a>
	DDRB|=0x03;		
	// 0x03 means 0000 0011 and it enables 1st and 2nd pin as o/p pin(coz 1 means o/p only remaining pins remains unchanged due to use of ORing function. as ORing means addition
	DDRB&=0xfb;
	// 0xfb means 1111 1011 and it enables 3rd pin as i/p pin only remaining pins remains unchanged due to use of ANDing function. as ANDing means product
	DDRD=0xff;
	int i=0,j=0;
  80:	20 e0       	ldi	r18, 0x00	; 0
  82:	30 e0       	ldi	r19, 0x00	; 0
  84:	c1 2c       	mov	r12, r1
  86:	d1 2c       	mov	r13, r1
	int a[10]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f};		// values in array a[10]={0,1,2,3,4,5,6,7,8,9}
    while(1)
    {
	// for continues show/display of data	
     	PORTB=0x01;				// 1st 7seg				
  88:	51 e0       	ldi	r21, 0x01	; 1
     	PORTD=a[i];
     	_delay_ms(100);
     	
     	PORTB=0x02;				// 2nd 7seg
  8a:	42 e0       	ldi	r20, 0x02	; 2
			}
		//	now it inc the values of i and j as per requirement and calculation
				i++;
				if(i==10)
				{
					i=0;
  8c:	10 e0       	ldi	r17, 0x00	; 0
  8e:	70 e0       	ldi	r23, 0x00	; 0
  90:	04 c0       	rjmp	.+8      	; 0x9a <main+0x4c>
					j++;
					if(j==10)
						j=0;				
  92:	21 2f       	mov	r18, r17
  94:	37 2f       	mov	r19, r23
			}
		//	now it inc the values of i and j as per requirement and calculation
				i++;
				if(i==10)
				{
					i=0;
  96:	c1 2e       	mov	r12, r17
  98:	d7 2e       	mov	r13, r23
	int a[10]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f};		// values in array a[10]={0,1,2,3,4,5,6,7,8,9}
    while(1)
    {
	// for continues show/display of data	
     	PORTB=0x01;				// 1st 7seg				
     	PORTD=a[i];
  9a:	d6 01       	movw	r26, r12
  9c:	aa 0f       	add	r26, r26
  9e:	bb 1f       	adc	r27, r27
  a0:	ee 24       	eor	r14, r14
  a2:	e3 94       	inc	r14
  a4:	f1 2c       	mov	r15, r1
  a6:	ec 0e       	add	r14, r28
  a8:	fd 1e       	adc	r15, r29
  aa:	ae 0d       	add	r26, r14
  ac:	bf 1d       	adc	r27, r15
     	_delay_ms(100);
     	
     	PORTB=0x02;				// 2nd 7seg
     	PORTD=a[j];
  ae:	f9 01       	movw	r30, r18
  b0:	ee 0f       	add	r30, r30
  b2:	ff 1f       	adc	r31, r31
  b4:	ee 0d       	add	r30, r14
  b6:	ff 1d       	adc	r31, r15
	int i=0,j=0;
	int a[10]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f};		// values in array a[10]={0,1,2,3,4,5,6,7,8,9}
    while(1)
    {
	// for continues show/display of data	
     	PORTB=0x01;				// 1st 7seg				
  b8:	58 bb       	out	0x18, r21	; 24
     	PORTD=a[i];
  ba:	6c 91       	ld	r22, X
  bc:	62 bb       	out	0x12, r22	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	87 ea       	ldi	r24, 0xA7	; 167
  c0:	91 e6       	ldi	r25, 0x61	; 97
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <main+0x74>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <main+0x7a>
  c8:	00 00       	nop
     	_delay_ms(100);
     	
     	PORTB=0x02;				// 2nd 7seg
  ca:	48 bb       	out	0x18, r20	; 24
     	PORTD=a[j];
  cc:	60 81       	ld	r22, Z
  ce:	62 bb       	out	0x12, r22	; 18
  d0:	87 ea       	ldi	r24, 0xA7	; 167
  d2:	91 e6       	ldi	r25, 0x61	; 97
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <main+0x86>
  d8:	00 c0       	rjmp	.+0      	; 0xda <main+0x8c>
  da:	00 00       	nop
     	_delay_ms(100);
		 if(PINB & 0x04)
  dc:	b2 9b       	sbis	0x16, 2	; 22
  de:	ec cf       	rjmp	.-40     	; 0xb8 <main+0x6a>
		{

			while(1)
			{
				PORTB=0x01;				// 1st 7seg
				PORTD=a[i];
  e0:	d6 01       	movw	r26, r12
  e2:	aa 0f       	add	r26, r26
  e4:	bb 1f       	adc	r27, r27
  e6:	e1 e0       	ldi	r30, 0x01	; 1
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	ec 0f       	add	r30, r28
  ec:	fd 1f       	adc	r31, r29
  ee:	ae 0f       	add	r26, r30
  f0:	bf 1f       	adc	r27, r31
				_delay_ms(100);
				
				PORTB=0x02;				// 2nd 7seg
				PORTD=a[j];
  f2:	f9 01       	movw	r30, r18
  f4:	ee 0f       	add	r30, r30
  f6:	ff 1f       	adc	r31, r31
  f8:	ee 24       	eor	r14, r14
  fa:	e3 94       	inc	r14
  fc:	f1 2c       	mov	r15, r1
  fe:	ec 0e       	add	r14, r28
 100:	fd 1e       	adc	r15, r29
 102:	ee 0d       	add	r30, r14
 104:	ff 1d       	adc	r31, r15
		 if(PINB & 0x04)
		{

			while(1)
			{
				PORTB=0x01;				// 1st 7seg
 106:	58 bb       	out	0x18, r21	; 24
				PORTD=a[i];
 108:	6c 91       	ld	r22, X
 10a:	62 bb       	out	0x12, r22	; 18
 10c:	87 ea       	ldi	r24, 0xA7	; 167
 10e:	91 e6       	ldi	r25, 0x61	; 97
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <main+0xc2>
 114:	00 c0       	rjmp	.+0      	; 0x116 <main+0xc8>
 116:	00 00       	nop
				_delay_ms(100);
				
				PORTB=0x02;				// 2nd 7seg
 118:	48 bb       	out	0x18, r20	; 24
				PORTD=a[j];
 11a:	60 81       	ld	r22, Z
 11c:	62 bb       	out	0x12, r22	; 18
 11e:	87 ea       	ldi	r24, 0xA7	; 167
 120:	91 e6       	ldi	r25, 0x61	; 97
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <main+0xd4>
 126:	00 c0       	rjmp	.+0      	; 0x128 <main+0xda>
 128:	00 00       	nop
				_delay_ms(100);
				
				if((PINB & 0x04)== 0x00)		// to check the button release and breaks when condi. is true and takes you out of the while loop
 12a:	b2 99       	sbic	0x16, 2	; 22
 12c:	ec cf       	rjmp	.-40     	; 0x106 <main+0xb8>
					break;
			}
		//	now it inc the values of i and j as per requirement and calculation
				i++;
 12e:	9f ef       	ldi	r25, 0xFF	; 255
 130:	c9 1a       	sub	r12, r25
 132:	d9 0a       	sbc	r13, r25
				if(i==10)
 134:	ea e0       	ldi	r30, 0x0A	; 10
 136:	ce 16       	cp	r12, r30
 138:	d1 04       	cpc	r13, r1
 13a:	09 f0       	breq	.+2      	; 0x13e <main+0xf0>
 13c:	ae cf       	rjmp	.-164    	; 0x9a <main+0x4c>
				{
					i=0;
					j++;
 13e:	2f 5f       	subi	r18, 0xFF	; 255
 140:	3f 4f       	sbci	r19, 0xFF	; 255
					if(j==10)
 142:	2a 30       	cpi	r18, 0x0A	; 10
 144:	31 05       	cpc	r19, r1
 146:	09 f4       	brne	.+2      	; 0x14a <main+0xfc>
 148:	a4 cf       	rjmp	.-184    	; 0x92 <main+0x44>
			}
		//	now it inc the values of i and j as per requirement and calculation
				i++;
				if(i==10)
				{
					i=0;
 14a:	c1 2e       	mov	r12, r17
 14c:	d7 2e       	mov	r13, r23
 14e:	a5 cf       	rjmp	.-182    	; 0x9a <main+0x4c>

00000150 <_exit>:
 150:	f8 94       	cli

00000152 <__stop_program>:
 152:	ff cf       	rjmp	.-2      	; 0x152 <__stop_program>
