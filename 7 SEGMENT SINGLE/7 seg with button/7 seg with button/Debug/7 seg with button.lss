
7 seg with button.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000dc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000dc  00000150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000150  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000020  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000010a  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000c2  00000000  00000000  000002aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000156  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000024  00000000  00000000  000004c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000017c  00000000  00000000  000004e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000010  00000000  00000000  00000664  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	51 c0       	rjmp	.+162    	; 0xd8 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
	DDRB=0xFE;
  38:	8e ef       	ldi	r24, 0xFE	; 254
  3a:	87 bb       	out	0x17, r24	; 23
	DDRD=0xff;
  3c:	8f ef       	ldi	r24, 0xFF	; 255
  3e:	81 bb       	out	0x11, r24	; 17
	PORTD=0x3f;		//0 initially
  40:	8f e3       	ldi	r24, 0x3F	; 63
  42:	82 bb       	out	0x12, r24	; 18
			else if(PORTD == 0x07)		
				PORTD=0x7f;				//8
			else if(PORTD == 0x7f)		
				PORTD=0x6f;				//9
			else if(PORTD == 0x6f)		
				PORTD=0x3f;				//0
  44:	af e3       	ldi	r26, 0x3F	; 63
			else if(PORTD == 0x7d)		
				PORTD=0x07;				//7
			else if(PORTD == 0x07)		
				PORTD=0x7f;				//8
			else if(PORTD == 0x7f)		
				PORTD=0x6f;				//9
  46:	ff e6       	ldi	r31, 0x6F	; 111
			else if(PORTD == 0x6d)		
				PORTD=0x7d;				//6
			else if(PORTD == 0x7d)		
				PORTD=0x07;				//7
			else if(PORTD == 0x07)		
				PORTD=0x7f;				//8
  48:	ef e7       	ldi	r30, 0x7F	; 127
			else if(PORTD == 0x66)		
				PORTD=0x6d;				//5
			else if(PORTD == 0x6d)		
				PORTD=0x7d;				//6
			else if(PORTD == 0x7d)		
				PORTD=0x07;				//7
  4a:	77 e0       	ldi	r23, 0x07	; 7
			else if(PORTD == 0x4f)		
				PORTD=0x66;				//4
			else if(PORTD == 0x66)		
				PORTD=0x6d;				//5
			else if(PORTD == 0x6d)		
				PORTD=0x7d;				//6
  4c:	6d e7       	ldi	r22, 0x7D	; 125
			else if(PORTD == 0x5b)		
				PORTD=0x4f;				//3
			else if(PORTD == 0x4f)		
				PORTD=0x66;				//4
			else if(PORTD == 0x66)		
				PORTD=0x6d;				//5
  4e:	5d e6       	ldi	r21, 0x6D	; 109
			else if(PORTD == 0x06)		
				PORTD=0x5b;				//2
			else if(PORTD == 0x5b)		
				PORTD=0x4f;				//3
			else if(PORTD == 0x4f)		
				PORTD=0x66;				//4
  50:	46 e6       	ldi	r20, 0x66	; 102
			if(PORTD == 0x3f)			
				PORTD=0x06;				//1
			else if(PORTD == 0x06)		
				PORTD=0x5b;				//2
			else if(PORTD == 0x5b)		
				PORTD=0x4f;				//3
  52:	3f e4       	ldi	r19, 0x4F	; 79
		if(PINB & 0x01)
		{
			if(PORTD == 0x3f)			
				PORTD=0x06;				//1
			else if(PORTD == 0x06)		
				PORTD=0x5b;				//2
  54:	2b e5       	ldi	r18, 0x5B	; 91
    while(1)
    {
		if(PINB & 0x01)
		{
			if(PORTD == 0x3f)			
				PORTD=0x06;				//1
  56:	96 e0       	ldi	r25, 0x06	; 6
	DDRB=0xFE;
	DDRD=0xff;
	PORTD=0x3f;		//0 initially
    while(1)
    {
		if(PINB & 0x01)
  58:	b0 9b       	sbis	0x16, 0	; 22
  5a:	fe cf       	rjmp	.-4      	; 0x58 <__SREG__+0x19>
		{
			if(PORTD == 0x3f)			
  5c:	82 b3       	in	r24, 0x12	; 18
  5e:	8f 33       	cpi	r24, 0x3F	; 63
  60:	11 f4       	brne	.+4      	; 0x66 <__SREG__+0x27>
				PORTD=0x06;				//1
  62:	92 bb       	out	0x12, r25	; 18
  64:	2f c0       	rjmp	.+94     	; 0xc4 <__SREG__+0x85>
			else if(PORTD == 0x06)		
  66:	82 b3       	in	r24, 0x12	; 18
  68:	86 30       	cpi	r24, 0x06	; 6
  6a:	11 f4       	brne	.+4      	; 0x70 <__SREG__+0x31>
				PORTD=0x5b;				//2
  6c:	22 bb       	out	0x12, r18	; 18
  6e:	2a c0       	rjmp	.+84     	; 0xc4 <__SREG__+0x85>
			else if(PORTD == 0x5b)		
  70:	82 b3       	in	r24, 0x12	; 18
  72:	8b 35       	cpi	r24, 0x5B	; 91
  74:	11 f4       	brne	.+4      	; 0x7a <__SREG__+0x3b>
				PORTD=0x4f;				//3
  76:	32 bb       	out	0x12, r19	; 18
  78:	25 c0       	rjmp	.+74     	; 0xc4 <__SREG__+0x85>
			else if(PORTD == 0x4f)		
  7a:	82 b3       	in	r24, 0x12	; 18
  7c:	8f 34       	cpi	r24, 0x4F	; 79
  7e:	11 f4       	brne	.+4      	; 0x84 <__SREG__+0x45>
				PORTD=0x66;				//4
  80:	42 bb       	out	0x12, r20	; 18
  82:	20 c0       	rjmp	.+64     	; 0xc4 <__SREG__+0x85>
			else if(PORTD == 0x66)		
  84:	82 b3       	in	r24, 0x12	; 18
  86:	86 36       	cpi	r24, 0x66	; 102
  88:	11 f4       	brne	.+4      	; 0x8e <__SREG__+0x4f>
				PORTD=0x6d;				//5
  8a:	52 bb       	out	0x12, r21	; 18
  8c:	1b c0       	rjmp	.+54     	; 0xc4 <__SREG__+0x85>
			else if(PORTD == 0x6d)		
  8e:	82 b3       	in	r24, 0x12	; 18
  90:	8d 36       	cpi	r24, 0x6D	; 109
  92:	11 f4       	brne	.+4      	; 0x98 <__SREG__+0x59>
				PORTD=0x7d;				//6
  94:	62 bb       	out	0x12, r22	; 18
  96:	16 c0       	rjmp	.+44     	; 0xc4 <__SREG__+0x85>
			else if(PORTD == 0x7d)		
  98:	82 b3       	in	r24, 0x12	; 18
  9a:	8d 37       	cpi	r24, 0x7D	; 125
  9c:	11 f4       	brne	.+4      	; 0xa2 <__SREG__+0x63>
				PORTD=0x07;				//7
  9e:	72 bb       	out	0x12, r23	; 18
  a0:	11 c0       	rjmp	.+34     	; 0xc4 <__SREG__+0x85>
			else if(PORTD == 0x07)		
  a2:	82 b3       	in	r24, 0x12	; 18
  a4:	87 30       	cpi	r24, 0x07	; 7
  a6:	11 f4       	brne	.+4      	; 0xac <__SREG__+0x6d>
				PORTD=0x7f;				//8
  a8:	e2 bb       	out	0x12, r30	; 18
  aa:	0c c0       	rjmp	.+24     	; 0xc4 <__SREG__+0x85>
			else if(PORTD == 0x7f)		
  ac:	82 b3       	in	r24, 0x12	; 18
  ae:	8f 37       	cpi	r24, 0x7F	; 127
  b0:	11 f4       	brne	.+4      	; 0xb6 <__SREG__+0x77>
				PORTD=0x6f;				//9
  b2:	f2 bb       	out	0x12, r31	; 18
  b4:	07 c0       	rjmp	.+14     	; 0xc4 <__SREG__+0x85>
			else if(PORTD == 0x6f)		
  b6:	82 b3       	in	r24, 0x12	; 18
  b8:	8f 36       	cpi	r24, 0x6F	; 111
  ba:	11 f4       	brne	.+4      	; 0xc0 <__SREG__+0x81>
				PORTD=0x3f;				//0
  bc:	a2 bb       	out	0x12, r26	; 18
  be:	02 c0       	rjmp	.+4      	; 0xc4 <__SREG__+0x85>
			else
				PORTD=PORTD;			// as it is
  c0:	82 b3       	in	r24, 0x12	; 18
  c2:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c4:	8f e3       	ldi	r24, 0x3F	; 63
  c6:	bd e0       	ldi	r27, 0x0D	; 13
  c8:	c3 e0       	ldi	r28, 0x03	; 3
  ca:	81 50       	subi	r24, 0x01	; 1
  cc:	b0 40       	sbci	r27, 0x00	; 0
  ce:	c0 40       	sbci	r28, 0x00	; 0
  d0:	e1 f7       	brne	.-8      	; 0xca <__SREG__+0x8b>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <__SREG__+0x95>
  d4:	00 00       	nop
  d6:	c0 cf       	rjmp	.-128    	; 0x58 <__SREG__+0x19>

000000d8 <_exit>:
  d8:	f8 94       	cli

000000da <__stop_program>:
  da:	ff cf       	rjmp	.-2      	; 0xda <__stop_program>
