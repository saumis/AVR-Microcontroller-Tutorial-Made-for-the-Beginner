
7.seg.2.button.inc.dec.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000126  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00000126  0000019a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000020  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000171  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000103  00000000  00000000  00000371  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000167  00000000  00000000  00000474  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000034  00000000  00000000  000005dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000194  00000000  00000000  00000610  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000157  00000000  00000000  000007a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000028  00000000  00000000  000008fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e6 e2       	ldi	r30, 0x26	; 38
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a6 37       	cpi	r26, 0x76	; 118
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>
  48:	02 d0       	rcall	.+4      	; 0x4e <main>
  4a:	6b c0       	rjmp	.+214    	; 0x122 <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <main>:

#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
  4e:	cf 93       	push	r28
  50:	df 93       	push	r29
  52:	cd b7       	in	r28, 0x3d	; 61
  54:	de b7       	in	r29, 0x3e	; 62
  56:	66 97       	sbiw	r28, 0x16	; 22
  58:	0f b6       	in	r0, 0x3f	; 63
  5a:	f8 94       	cli
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	0f be       	out	0x3f, r0	; 63
  60:	cd bf       	out	0x3d, r28	; 61
	DDRB&=0xFC;			
  62:	87 b3       	in	r24, 0x17	; 23
  64:	8c 7f       	andi	r24, 0xFC	; 252
  66:	87 bb       	out	0x17, r24	; 23
	DDRD=0xff;
  68:	8f ef       	ldi	r24, 0xFF	; 255
  6a:	81 bb       	out	0x11, r24	; 17
	int i=0;
	int a[11]={0x6f,0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f};
  6c:	86 e1       	ldi	r24, 0x16	; 22
  6e:	e0 e6       	ldi	r30, 0x60	; 96
  70:	f0 e0       	ldi	r31, 0x00	; 0
  72:	de 01       	movw	r26, r28
  74:	11 96       	adiw	r26, 0x01	; 1
  76:	01 90       	ld	r0, Z+
  78:	0d 92       	st	X+, r0
  7a:	8a 95       	dec	r24
  7c:	e1 f7       	brne	.-8      	; 0x76 <main+0x28>

int main(void)
{
	DDRB&=0xFC;			
	DDRD=0xff;
	int i=0;
  7e:	80 e0       	ldi	r24, 0x00	; 0
  80:	90 e0       	ldi	r25, 0x00	; 0
    {
		if(PINB & 0x01)					//condition to check switch press condition
		{								// loop for increment
			++i;
			if(i==11)
				i=1;
  82:	61 e0       	ldi	r22, 0x01	; 1
  84:	50 e0       	ldi	r21, 0x00	; 0
			PORTD=a[i];
			_delay_ms(1000);
			if(i==10)
				i=0;						
  86:	40 e0       	ldi	r20, 0x00	; 0
  88:	30 e0       	ldi	r19, 0x00	; 0
		}
		if(PINB & 0x02)					//condition to check switch press condition 
		{								// loop for decrement
			--i;
			if(i<1)
			i=10;
  8a:	aa e0       	ldi	r26, 0x0A	; 10
  8c:	70 e0       	ldi	r23, 0x00	; 0
	DDRD=0xff;
	int i=0;
	int a[11]={0x6f,0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f};
	while(1)
    {
		if(PINB & 0x01)					//condition to check switch press condition
  8e:	b0 9b       	sbis	0x16, 0	; 22
  90:	1d c0       	rjmp	.+58     	; 0xcc <main+0x7e>
		{								// loop for increment
			++i;
  92:	01 96       	adiw	r24, 0x01	; 1
			if(i==11)
  94:	8b 30       	cpi	r24, 0x0B	; 11
  96:	91 05       	cpc	r25, r1
  98:	b1 f1       	breq	.+108    	; 0x106 <main+0xb8>
				i=1;
			PORTD=a[i];
  9a:	fc 01       	movw	r30, r24
  9c:	ee 0f       	add	r30, r30
  9e:	ff 1f       	adc	r31, r31
  a0:	01 e0       	ldi	r16, 0x01	; 1
  a2:	10 e0       	ldi	r17, 0x00	; 0
  a4:	0c 0f       	add	r16, r28
  a6:	1d 1f       	adc	r17, r29
  a8:	e0 0f       	add	r30, r16
  aa:	f1 1f       	adc	r31, r17
  ac:	20 81       	ld	r18, Z
  ae:	22 bb       	out	0x12, r18	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b0:	1f e3       	ldi	r17, 0x3F	; 63
  b2:	2d e0       	ldi	r18, 0x0D	; 13
  b4:	e3 e0       	ldi	r30, 0x03	; 3
  b6:	11 50       	subi	r17, 0x01	; 1
  b8:	20 40       	sbci	r18, 0x00	; 0
  ba:	e0 40       	sbci	r30, 0x00	; 0
  bc:	e1 f7       	brne	.-8      	; 0xb6 <main+0x68>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <main+0x72>
  c0:	00 00       	nop
			_delay_ms(1000);
			if(i==10)
  c2:	8a 30       	cpi	r24, 0x0A	; 10
  c4:	91 05       	cpc	r25, r1
  c6:	11 f4       	brne	.+4      	; 0xcc <main+0x7e>
				i=0;						
  c8:	84 2f       	mov	r24, r20
  ca:	93 2f       	mov	r25, r19
		}
		if(PINB & 0x02)					//condition to check switch press condition 
  cc:	b1 9b       	sbis	0x16, 1	; 22
  ce:	df cf       	rjmp	.-66     	; 0x8e <main+0x40>
		{								// loop for decrement
			--i;
  d0:	01 97       	sbiw	r24, 0x01	; 1
			if(i<1)
  d2:	18 16       	cp	r1, r24
  d4:	19 06       	cpc	r1, r25
  d6:	14 f0       	brlt	.+4      	; 0xdc <main+0x8e>
			i=10;
  d8:	8a 2f       	mov	r24, r26
  da:	97 2f       	mov	r25, r23
			PORTD=a[i];
  dc:	fc 01       	movw	r30, r24
  de:	ee 0f       	add	r30, r30
  e0:	ff 1f       	adc	r31, r31
  e2:	01 e0       	ldi	r16, 0x01	; 1
  e4:	10 e0       	ldi	r17, 0x00	; 0
  e6:	0c 0f       	add	r16, r28
  e8:	1d 1f       	adc	r17, r29
  ea:	e0 0f       	add	r30, r16
  ec:	f1 1f       	adc	r31, r17
  ee:	20 81       	ld	r18, Z
  f0:	22 bb       	out	0x12, r18	; 18
  f2:	1f e3       	ldi	r17, 0x3F	; 63
  f4:	2d e0       	ldi	r18, 0x0D	; 13
  f6:	e3 e0       	ldi	r30, 0x03	; 3
  f8:	11 50       	subi	r17, 0x01	; 1
  fa:	20 40       	sbci	r18, 0x00	; 0
  fc:	e0 40       	sbci	r30, 0x00	; 0
  fe:	e1 f7       	brne	.-8      	; 0xf8 <main+0xaa>
 100:	00 c0       	rjmp	.+0      	; 0x102 <main+0xb4>
 102:	00 00       	nop
 104:	c4 cf       	rjmp	.-120    	; 0x8e <main+0x40>
		if(PINB & 0x01)					//condition to check switch press condition
		{								// loop for increment
			++i;
			if(i==11)
				i=1;
			PORTD=a[i];
 106:	8b 81       	ldd	r24, Y+3	; 0x03
 108:	82 bb       	out	0x12, r24	; 18
 10a:	ff e3       	ldi	r31, 0x3F	; 63
 10c:	0d e0       	ldi	r16, 0x0D	; 13
 10e:	13 e0       	ldi	r17, 0x03	; 3
 110:	f1 50       	subi	r31, 0x01	; 1
 112:	00 40       	sbci	r16, 0x00	; 0
 114:	10 40       	sbci	r17, 0x00	; 0
 116:	e1 f7       	brne	.-8      	; 0x110 <main+0xc2>
 118:	00 c0       	rjmp	.+0      	; 0x11a <main+0xcc>
 11a:	00 00       	nop
    {
		if(PINB & 0x01)					//condition to check switch press condition
		{								// loop for increment
			++i;
			if(i==11)
				i=1;
 11c:	86 2f       	mov	r24, r22
 11e:	95 2f       	mov	r25, r21
 120:	d5 cf       	rjmp	.-86     	; 0xcc <main+0x7e>

00000122 <_exit>:
 122:	f8 94       	cli

00000124 <__stop_program>:
 124:	ff cf       	rjmp	.-2      	; 0x124 <__stop_program>
