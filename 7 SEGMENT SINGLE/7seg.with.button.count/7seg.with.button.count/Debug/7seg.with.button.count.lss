
7seg.with.button.count.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000118  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000118  0000018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000020  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000126  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000dc  00000000  00000000  00000302  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000017e  00000000  00000000  000003de  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000024  00000000  00000000  0000055c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000191  00000000  00000000  00000580  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000102  00000000  00000000  00000711  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000030  00000000  00000000  00000813  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	6f c0       	rjmp	.+222    	; 0x114 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
	DDRB=0xFE;
  38:	8e ef       	ldi	r24, 0xFE	; 254
  3a:	87 bb       	out	0x17, r24	; 23
	DDRD=0xff;
  3c:	8f ef       	ldi	r24, 0xFF	; 255
  3e:	81 bb       	out	0x11, r24	; 17
	int count=0;
  40:	80 e0       	ldi	r24, 0x00	; 0
  42:	90 e0       	ldi	r25, 0x00	; 0
			else if(count==10)		
				PORTD=0x3f;				//0
			_delay_ms(1000);
			count++;
	     if(count==10)
			count=0;
  44:	f0 e0       	ldi	r31, 0x00	; 0
  46:	e0 e0       	ldi	r30, 0x00	; 0
			else if(count==8)		
				PORTD=0x7f;				//8
			else if(count==9)		
				PORTD=0x6f;				//9
			else if(count==10)		
				PORTD=0x3f;				//0
  48:	df e3       	ldi	r29, 0x3F	; 63
			else if(count==6)
				PORTD=0x7d;				//6
			else if(count==7)
				PORTD=0x07;				//7
			else if(count==8)		
				PORTD=0x7f;				//8
  4a:	bf e7       	ldi	r27, 0x7F	; 127
			else if(count==5)
				PORTD=0x6d;				//5
			else if(count==6)
				PORTD=0x7d;				//6
			else if(count==7)
				PORTD=0x07;				//7
  4c:	a7 e0       	ldi	r26, 0x07	; 7
			else if(count==4)
				PORTD=0x66;				//4
			else if(count==5)
				PORTD=0x6d;				//5
			else if(count==6)
				PORTD=0x7d;				//6
  4e:	7d e7       	ldi	r23, 0x7D	; 125
			else if(count==3)
				PORTD=0x4f;				//3
			else if(count==4)
				PORTD=0x66;				//4
			else if(count==5)
				PORTD=0x6d;				//5
  50:	6d e6       	ldi	r22, 0x6D	; 109
			else if(count==2)		
				PORTD=0x5b;				//2
			else if(count==3)
				PORTD=0x4f;				//3
			else if(count==4)
				PORTD=0x66;				//4
  52:	56 e6       	ldi	r21, 0x66	; 102
			if(count==1)			
				PORTD=0x06;				//1
			else if(count==2)		
				PORTD=0x5b;				//2
			else if(count==3)
				PORTD=0x4f;				//3
  54:	4f e4       	ldi	r20, 0x4F	; 79
		if(b == 0x01)
		{
			if(count==1)			
				PORTD=0x06;				//1
			else if(count==2)		
				PORTD=0x5b;				//2
  56:	3b e5       	ldi	r19, 0x5B	; 91
		int b=0;
		b=PINB & 0x01;
		if(b == 0x01)
		{
			if(count==1)			
				PORTD=0x06;				//1
  58:	26 e0       	ldi	r18, 0x06	; 6
  5a:	02 c0       	rjmp	.+4      	; 0x60 <__SREG__+0x21>
			else if(count==10)		
				PORTD=0x3f;				//0
			_delay_ms(1000);
			count++;
	     if(count==10)
			count=0;
  5c:	8f 2f       	mov	r24, r31
  5e:	9e 2f       	mov	r25, r30
	//PORTD=0x3f;		//0 initially
    while(1)
    {
		int b=0;
		b=PINB & 0x01;
		if(b == 0x01)
  60:	b0 9b       	sbis	0x16, 0	; 22
  62:	fe cf       	rjmp	.-4      	; 0x60 <__SREG__+0x21>
		{
			if(count==1)			
  64:	81 30       	cpi	r24, 0x01	; 1
  66:	91 05       	cpc	r25, r1
  68:	11 f4       	brne	.+4      	; 0x6e <__SREG__+0x2f>
				PORTD=0x06;				//1
  6a:	22 bb       	out	0x12, r18	; 18
  6c:	48 c0       	rjmp	.+144    	; 0xfe <__SREG__+0xbf>
			else if(count==2)		
  6e:	82 30       	cpi	r24, 0x02	; 2
  70:	91 05       	cpc	r25, r1
  72:	11 f4       	brne	.+4      	; 0x78 <__SREG__+0x39>
				PORTD=0x5b;				//2
  74:	32 bb       	out	0x12, r19	; 18
  76:	43 c0       	rjmp	.+134    	; 0xfe <__SREG__+0xbf>
			else if(count==3)
  78:	83 30       	cpi	r24, 0x03	; 3
  7a:	91 05       	cpc	r25, r1
  7c:	11 f4       	brne	.+4      	; 0x82 <__SREG__+0x43>
				PORTD=0x4f;				//3
  7e:	42 bb       	out	0x12, r20	; 18
  80:	3e c0       	rjmp	.+124    	; 0xfe <__SREG__+0xbf>
			else if(count==4)
  82:	84 30       	cpi	r24, 0x04	; 4
  84:	91 05       	cpc	r25, r1
  86:	11 f4       	brne	.+4      	; 0x8c <__SREG__+0x4d>
				PORTD=0x66;				//4
  88:	52 bb       	out	0x12, r21	; 18
  8a:	39 c0       	rjmp	.+114    	; 0xfe <__SREG__+0xbf>
			else if(count==5)
  8c:	85 30       	cpi	r24, 0x05	; 5
  8e:	91 05       	cpc	r25, r1
  90:	11 f4       	brne	.+4      	; 0x96 <__SREG__+0x57>
				PORTD=0x6d;				//5
  92:	62 bb       	out	0x12, r22	; 18
  94:	34 c0       	rjmp	.+104    	; 0xfe <__SREG__+0xbf>
			else if(count==6)
  96:	86 30       	cpi	r24, 0x06	; 6
  98:	91 05       	cpc	r25, r1
  9a:	11 f4       	brne	.+4      	; 0xa0 <__SREG__+0x61>
				PORTD=0x7d;				//6
  9c:	72 bb       	out	0x12, r23	; 18
  9e:	2f c0       	rjmp	.+94     	; 0xfe <__SREG__+0xbf>
			else if(count==7)
  a0:	87 30       	cpi	r24, 0x07	; 7
  a2:	91 05       	cpc	r25, r1
  a4:	11 f4       	brne	.+4      	; 0xaa <__SREG__+0x6b>
				PORTD=0x07;				//7
  a6:	a2 bb       	out	0x12, r26	; 18
  a8:	2a c0       	rjmp	.+84     	; 0xfe <__SREG__+0xbf>
			else if(count==8)		
  aa:	88 30       	cpi	r24, 0x08	; 8
  ac:	91 05       	cpc	r25, r1
  ae:	11 f4       	brne	.+4      	; 0xb4 <__SREG__+0x75>
				PORTD=0x7f;				//8
  b0:	b2 bb       	out	0x12, r27	; 18
  b2:	25 c0       	rjmp	.+74     	; 0xfe <__SREG__+0xbf>
			else if(count==9)		
  b4:	89 30       	cpi	r24, 0x09	; 9
  b6:	91 05       	cpc	r25, r1
  b8:	71 f4       	brne	.+28     	; 0xd6 <__SREG__+0x97>
				PORTD=0x6f;				//9
  ba:	0f e6       	ldi	r16, 0x6F	; 111
  bc:	02 bb       	out	0x12, r16	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	1f e3       	ldi	r17, 0x3F	; 63
  c0:	8d e0       	ldi	r24, 0x0D	; 13
  c2:	93 e0       	ldi	r25, 0x03	; 3
  c4:	11 50       	subi	r17, 0x01	; 1
  c6:	80 40       	sbci	r24, 0x00	; 0
  c8:	90 40       	sbci	r25, 0x00	; 0
  ca:	e1 f7       	brne	.-8      	; 0xc4 <__SREG__+0x85>
  cc:	00 c0       	rjmp	.+0      	; 0xce <__SREG__+0x8f>
  ce:	00 00       	nop
			else if(count==10)		
				PORTD=0x3f;				//0
			_delay_ms(1000);
			count++;
	     if(count==10)
			count=0;
  d0:	8f 2f       	mov	r24, r31
  d2:	9e 2f       	mov	r25, r30
  d4:	c5 cf       	rjmp	.-118    	; 0x60 <__SREG__+0x21>
				PORTD=0x07;				//7
			else if(count==8)		
				PORTD=0x7f;				//8
			else if(count==9)		
				PORTD=0x6f;				//9
			else if(count==10)		
  d6:	8a 30       	cpi	r24, 0x0A	; 10
  d8:	91 05       	cpc	r25, r1
  da:	11 f4       	brne	.+4      	; 0xe0 <__SREG__+0xa1>
				PORTD=0x3f;				//0
  dc:	d2 bb       	out	0x12, r29	; 18
  de:	0f c0       	rjmp	.+30     	; 0xfe <__SREG__+0xbf>
  e0:	cf e3       	ldi	r28, 0x3F	; 63
  e2:	0d e0       	ldi	r16, 0x0D	; 13
  e4:	13 e0       	ldi	r17, 0x03	; 3
  e6:	c1 50       	subi	r28, 0x01	; 1
  e8:	00 40       	sbci	r16, 0x00	; 0
  ea:	10 40       	sbci	r17, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <__SREG__+0xa7>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <__SREG__+0xb1>
  f0:	00 00       	nop
			_delay_ms(1000);
			count++;
  f2:	01 96       	adiw	r24, 0x01	; 1
	     if(count==10)
  f4:	8a 30       	cpi	r24, 0x0A	; 10
  f6:	91 05       	cpc	r25, r1
  f8:	09 f4       	brne	.+2      	; 0xfc <__SREG__+0xbd>
  fa:	b0 cf       	rjmp	.-160    	; 0x5c <__SREG__+0x1d>
  fc:	b1 cf       	rjmp	.-158    	; 0x60 <__SREG__+0x21>
  fe:	cf e3       	ldi	r28, 0x3F	; 63
 100:	0d e0       	ldi	r16, 0x0D	; 13
 102:	13 e0       	ldi	r17, 0x03	; 3
 104:	c1 50       	subi	r28, 0x01	; 1
 106:	00 40       	sbci	r16, 0x00	; 0
 108:	10 40       	sbci	r17, 0x00	; 0
 10a:	e1 f7       	brne	.-8      	; 0x104 <__SREG__+0xc5>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <__SREG__+0xcf>
 10e:	00 00       	nop
			else if(count==9)		
				PORTD=0x6f;				//9
			else if(count==10)		
				PORTD=0x3f;				//0
			_delay_ms(1000);
			count++;
 110:	01 96       	adiw	r24, 0x01	; 1
 112:	a6 cf       	rjmp	.-180    	; 0x60 <__SREG__+0x21>

00000114 <_exit>:
 114:	f8 94       	cli

00000116 <__stop_program>:
 116:	ff cf       	rjmp	.-2      	; 0x116 <__stop_program>
