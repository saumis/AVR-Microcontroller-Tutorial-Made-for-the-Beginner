
2interrupts with led.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000bc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000bc  00000130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000130  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000030  00000000  00000000  00000160  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000016e  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000f2  00000000  00000000  000002fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000171  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  0000007c  00000000  00000000  00000564  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000019c  00000000  00000000  000005e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000ac  00000000  00000000  0000077c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  00000828  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__vector_1>
   4:	3e c0       	rjmp	.+124    	; 0x82 <__vector_2>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	41 c0       	rjmp	.+130    	; 0xb8 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
#include <avr/interrupt.h>
#include <util/delay.h>

void main(void)
{
	DDRB=0x07;
  38:	87 e0       	ldi	r24, 0x07	; 7
  3a:	87 bb       	out	0x17, r24	; 23
	GICR=0xc0;						// enables interrupt INT0 and INT1 (p.no. 49 atmega8 data-sheet)
  3c:	80 ec       	ldi	r24, 0xC0	; 192
  3e:	8b bf       	out	0x3b, r24	; 59
	MCUCR=0x0b;						// detects interrupt INT0 at rising edge and INT1 at falling edge(p.no.66-67 atmega8 data-sheet)
  40:	8b e0       	ldi	r24, 0x0B	; 11
  42:	85 bf       	out	0x35, r24	; 53
	sei();							//	enables interrupt
  44:	78 94       	sei
					
    while(1)
    {
		PORTB=0x04;	
  46:	84 e0       	ldi	r24, 0x04	; 4
  48:	88 bb       	out	0x18, r24	; 24
  4a:	fe cf       	rjmp	.-4      	; 0x48 <__SREG__+0x9>

0000004c <__vector_1>:
						
    }
}

ISR(INT0_vect)						//Function definition of interrupt INT0 should be in this
{
  4c:	1f 92       	push	r1
  4e:	0f 92       	push	r0
  50:	0f b6       	in	r0, 0x3f	; 63
  52:	0f 92       	push	r0
  54:	11 24       	eor	r1, r1
  56:	2f 93       	push	r18
  58:	8f 93       	push	r24
  5a:	9f 93       	push	r25
	PORTB=0x01;
  5c:	81 e0       	ldi	r24, 0x01	; 1
  5e:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  60:	2f e9       	ldi	r18, 0x9F	; 159
  62:	86 e8       	ldi	r24, 0x86	; 134
  64:	91 e0       	ldi	r25, 0x01	; 1
  66:	21 50       	subi	r18, 0x01	; 1
  68:	80 40       	sbci	r24, 0x00	; 0
  6a:	90 40       	sbci	r25, 0x00	; 0
  6c:	e1 f7       	brne	.-8      	; 0x66 <__vector_1+0x1a>
  6e:	00 c0       	rjmp	.+0      	; 0x70 <__vector_1+0x24>
  70:	00 00       	nop
	_delay_ms(500);
}
  72:	9f 91       	pop	r25
  74:	8f 91       	pop	r24
  76:	2f 91       	pop	r18
  78:	0f 90       	pop	r0
  7a:	0f be       	out	0x3f, r0	; 63
  7c:	0f 90       	pop	r0
  7e:	1f 90       	pop	r1
  80:	18 95       	reti

00000082 <__vector_2>:
ISR(INT1_vect)						//Function definition of interrupt INT1 should be in this
{
  82:	1f 92       	push	r1
  84:	0f 92       	push	r0
  86:	0f b6       	in	r0, 0x3f	; 63
  88:	0f 92       	push	r0
  8a:	11 24       	eor	r1, r1
  8c:	2f 93       	push	r18
  8e:	8f 93       	push	r24
  90:	9f 93       	push	r25
	PORTB=0x02;
  92:	82 e0       	ldi	r24, 0x02	; 2
  94:	88 bb       	out	0x18, r24	; 24
  96:	2f e9       	ldi	r18, 0x9F	; 159
  98:	86 e8       	ldi	r24, 0x86	; 134
  9a:	91 e0       	ldi	r25, 0x01	; 1
  9c:	21 50       	subi	r18, 0x01	; 1
  9e:	80 40       	sbci	r24, 0x00	; 0
  a0:	90 40       	sbci	r25, 0x00	; 0
  a2:	e1 f7       	brne	.-8      	; 0x9c <__vector_2+0x1a>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <__vector_2+0x24>
  a6:	00 00       	nop
	_delay_ms(500);
  a8:	9f 91       	pop	r25
  aa:	8f 91       	pop	r24
  ac:	2f 91       	pop	r18
  ae:	0f 90       	pop	r0
  b0:	0f be       	out	0x3f, r0	; 63
  b2:	0f 90       	pop	r0
  b4:	1f 90       	pop	r1
  b6:	18 95       	reti

000000b8 <_exit>:
  b8:	f8 94       	cli

000000ba <__stop_program>:
  ba:	ff cf       	rjmp	.-2      	; 0xba <__stop_program>
