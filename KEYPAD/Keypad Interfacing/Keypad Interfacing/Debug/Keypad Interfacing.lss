
Keypad Interfacing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000001e2  00000276  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  00000276  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000276  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000002a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000003cf  00000000  00000000  000002e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000016c  00000000  00000000  000006b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001ca  00000000  00000000  00000821  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  000009ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000199  00000000  00000000  00000a50  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000003e  00000000  00000000  00000be9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00000c27  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a2 36       	cpi	r26, 0x62	; 98
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	c2 d0       	rcall	.+388    	; 0x1c8 <main>
  44:	cc c0       	rjmp	.+408    	; 0x1de <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <command>:
	//command(0x0e);						//to show cursor
	//command(0x01);						//to clear LCD completely and reset registers
}
void command(unsigned char a)					// to give command to LCD like which position we want to show data
{
	PORTB=a;						// to send value of a to data pins
  48:	88 bb       	out	0x18, r24	; 24
	PORTC &= 0xfe;						//Rs = 0	 to tell LCD that value on data pin is command
  4a:	a8 98       	cbi	0x15, 0	; 21
	PORTC |=0x02;						//Enable=1 to get data transfer pulse(logic 1)
  4c:	a9 9a       	sbi	0x15, 1	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  4e:	8f e1       	ldi	r24, 0x1F	; 31
  50:	9e e4       	ldi	r25, 0x4E	; 78
  52:	01 97       	sbiw	r24, 0x01	; 1
  54:	f1 f7       	brne	.-4      	; 0x52 <command+0xa>
  56:	00 c0       	rjmp	.+0      	; 0x58 <command+0x10>
  58:	00 00       	nop
	_delay_ms(10);
	PORTC &=0xfd;						//Enable=0 to get data transfer pulse(logic 0)
  5a:	a9 98       	cbi	0x15, 1	; 21
  5c:	08 95       	ret

0000005e <lcd_init>:
}

// func declaration LCD interface
void lcd_init()							// to initialize LCD
{
	command(0x38);						//LCD init basic command
  5e:	88 e3       	ldi	r24, 0x38	; 56
  60:	f3 df       	rcall	.-26     	; 0x48 <command>
	command(0x06);						//LCD init basic command
  62:	86 e0       	ldi	r24, 0x06	; 6
  64:	f1 df       	rcall	.-30     	; 0x48 <command>
	command(0x0c);						//to hide cursor
  66:	8c e0       	ldi	r24, 0x0C	; 12
  68:	ef df       	rcall	.-34     	; 0x48 <command>
  6a:	08 95       	ret

0000006c <data>:
	_delay_ms(10);
	PORTC &=0xfd;						//Enable=0 to get data transfer pulse(logic 0)
}
void data(unsigned char a)
{
	PORTB=a;
  6c:	88 bb       	out	0x18, r24	; 24
	PORTC |=0x01;						// Rs=1	to tell LCD that value on data pins is DATA
  6e:	a8 9a       	sbi	0x15, 0	; 21
	PORTC |=0x02;
  70:	a9 9a       	sbi	0x15, 1	; 21
  72:	8f e1       	ldi	r24, 0x1F	; 31
  74:	9e e4       	ldi	r25, 0x4E	; 78
  76:	01 97       	sbiw	r24, 0x01	; 1
  78:	f1 f7       	brne	.-4      	; 0x76 <data+0xa>
  7a:	00 c0       	rjmp	.+0      	; 0x7c <data+0x10>
  7c:	00 00       	nop
	_delay_ms(10);
	PORTC &=0xfd;
  7e:	a9 98       	cbi	0x15, 1	; 21
  80:	08 95       	ret

00000082 <check>:
int check()
{
	
	//char key[16]={'7','8','9','/','4','5','6','*','1','2','3','-','C','0','=','+'};
	// check 1
	PORTD=0x0e;
  82:	8e e0       	ldi	r24, 0x0E	; 14
  84:	82 bb       	out	0x12, r24	; 18
	if ((PIND & 0b00011110)==0b00001110)
  86:	80 b3       	in	r24, 0x10	; 16
  88:	8e 71       	andi	r24, 0x1E	; 30
  8a:	8e 30       	cpi	r24, 0x0E	; 14
  8c:	29 f4       	brne	.+10     	; 0x98 <check+0x16>
	{
		//command(i);
		data('7');
  8e:	87 e3       	ldi	r24, 0x37	; 55
  90:	ed df       	rcall	.-38     	; 0x6c <data>
		return (7);
  92:	87 e0       	ldi	r24, 0x07	; 7
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	08 95       	ret
		_delay_ms(2000);
		i++;
	}
	else if ((PIND & 0b00101110)==0b00001110)
  98:	80 b3       	in	r24, 0x10	; 16
  9a:	8e 72       	andi	r24, 0x2E	; 46
  9c:	8e 30       	cpi	r24, 0x0E	; 14
  9e:	29 f4       	brne	.+10     	; 0xaa <check+0x28>
	{
		//command(i);
		data('8');
  a0:	88 e3       	ldi	r24, 0x38	; 56
  a2:	e4 df       	rcall	.-56     	; 0x6c <data>
		return (8);
  a4:	88 e0       	ldi	r24, 0x08	; 8
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	08 95       	ret
		_delay_ms(2000);
		i++;
	}
	else if ((PIND & 0b01001110)==0b00001110)
  aa:	80 b3       	in	r24, 0x10	; 16
  ac:	8e 74       	andi	r24, 0x4E	; 78
  ae:	8e 30       	cpi	r24, 0x0E	; 14
  b0:	29 f4       	brne	.+10     	; 0xbc <check+0x3a>
	{
		//command(i);
		data('9');
  b2:	89 e3       	ldi	r24, 0x39	; 57
  b4:	db df       	rcall	.-74     	; 0x6c <data>
		return (9);
  b6:	89 e0       	ldi	r24, 0x09	; 9
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	08 95       	ret
		_delay_ms(2000);
		i++;
	}
	else if ((PIND & 0b10001110)==0b00001110)
  bc:	80 b3       	in	r24, 0x10	; 16
  be:	8e 78       	andi	r24, 0x8E	; 142
  c0:	8e 30       	cpi	r24, 0x0E	; 14
  c2:	29 f4       	brne	.+10     	; 0xce <check+0x4c>
	{
		//command(i);
		data('/');
  c4:	8f e2       	ldi	r24, 0x2F	; 47
  c6:	d2 df       	rcall	.-92     	; 0x6c <data>
		return (99);
  c8:	83 e6       	ldi	r24, 0x63	; 99
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	08 95       	ret
		_delay_ms(2000);
		i++;
	}
	
	// check 2
	PORTD=0x0d;
  ce:	8d e0       	ldi	r24, 0x0D	; 13
  d0:	82 bb       	out	0x12, r24	; 18
	if ((PIND & 0b00011101)==0b00001101)
  d2:	80 b3       	in	r24, 0x10	; 16
  d4:	8d 71       	andi	r24, 0x1D	; 29
  d6:	8d 30       	cpi	r24, 0x0D	; 13
  d8:	29 f4       	brne	.+10     	; 0xe4 <check+0x62>
	{
		//command(i);
		data('4');
  da:	84 e3       	ldi	r24, 0x34	; 52
  dc:	c7 df       	rcall	.-114    	; 0x6c <data>
		return (4);
  de:	84 e0       	ldi	r24, 0x04	; 4
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	08 95       	ret
		_delay_ms(2000);
		i++;
	}
	else if ((PIND & 0b00101101)==0b00001101)
  e4:	80 b3       	in	r24, 0x10	; 16
  e6:	8d 72       	andi	r24, 0x2D	; 45
  e8:	8d 30       	cpi	r24, 0x0D	; 13
  ea:	29 f4       	brne	.+10     	; 0xf6 <check+0x74>
	{
		//command(i);
		data('5');
  ec:	85 e3       	ldi	r24, 0x35	; 53
  ee:	be df       	rcall	.-132    	; 0x6c <data>
		return (5);
  f0:	85 e0       	ldi	r24, 0x05	; 5
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	08 95       	ret
		_delay_ms(2000);
		i++;
	}
	else if ((PIND & 0b01001101)==0b00001101)
  f6:	80 b3       	in	r24, 0x10	; 16
  f8:	8d 74       	andi	r24, 0x4D	; 77
  fa:	8d 30       	cpi	r24, 0x0D	; 13
  fc:	29 f4       	brne	.+10     	; 0x108 <check+0x86>
	{
		//command(0x80);
		data('6');
  fe:	86 e3       	ldi	r24, 0x36	; 54
 100:	b5 df       	rcall	.-150    	; 0x6c <data>
		return (6);
 102:	86 e0       	ldi	r24, 0x06	; 6
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	08 95       	ret
		_delay_ms(2000);
		i++;
	}
	else if ((PIND & 0b10001101)==0b00001101)
 108:	80 b3       	in	r24, 0x10	; 16
 10a:	8d 78       	andi	r24, 0x8D	; 141
 10c:	8d 30       	cpi	r24, 0x0D	; 13
 10e:	29 f4       	brne	.+10     	; 0x11a <check+0x98>
	{
		//command(0x88);
		data('*');
 110:	8a e2       	ldi	r24, 0x2A	; 42
 112:	ac df       	rcall	.-168    	; 0x6c <data>
		return (88);
 114:	88 e5       	ldi	r24, 0x58	; 88
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	08 95       	ret
		_delay_ms(2000);
		i++;
	}
	
	// check 3
	PORTD=0x0b;
 11a:	8b e0       	ldi	r24, 0x0B	; 11
 11c:	82 bb       	out	0x12, r24	; 18
	if ((PIND & 0b00011011)==0b00001011)
 11e:	80 b3       	in	r24, 0x10	; 16
 120:	8b 71       	andi	r24, 0x1B	; 27
 122:	8b 30       	cpi	r24, 0x0B	; 11
 124:	29 f4       	brne	.+10     	; 0x130 <check+0xae>
	{
		//command(0x85);
		data('1');
 126:	81 e3       	ldi	r24, 0x31	; 49
 128:	a1 df       	rcall	.-190    	; 0x6c <data>
		return (1);
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	08 95       	ret
		_delay_ms(2000);
		i++;
	}
	else if ((PIND & 0b00101011)==0b00001011)
 130:	80 b3       	in	r24, 0x10	; 16
 132:	8b 72       	andi	r24, 0x2B	; 43
 134:	8b 30       	cpi	r24, 0x0B	; 11
 136:	29 f4       	brne	.+10     	; 0x142 <check+0xc0>
	{
		//command(0x86);
		data('2');
 138:	82 e3       	ldi	r24, 0x32	; 50
 13a:	98 df       	rcall	.-208    	; 0x6c <data>
		return (2);
 13c:	82 e0       	ldi	r24, 0x02	; 2
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	08 95       	ret
		_delay_ms(2000);
		i++;
	}
	else if ((PIND & 0b01001011)==0b00001011)
 142:	80 b3       	in	r24, 0x10	; 16
 144:	8b 74       	andi	r24, 0x4B	; 75
 146:	8b 30       	cpi	r24, 0x0B	; 11
 148:	29 f4       	brne	.+10     	; 0x154 <check+0xd2>
	{
		//command(0x87);
		data('3');
 14a:	83 e3       	ldi	r24, 0x33	; 51
 14c:	8f df       	rcall	.-226    	; 0x6c <data>
		return (3);
 14e:	83 e0       	ldi	r24, 0x03	; 3
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	08 95       	ret
		_delay_ms(2000);
		i++;
	}
	else if ((PIND & 0b10001011)==0b00001011)
 154:	80 b3       	in	r24, 0x10	; 16
 156:	8b 78       	andi	r24, 0x8B	; 139
 158:	8b 30       	cpi	r24, 0x0B	; 11
 15a:	29 f4       	brne	.+10     	; 0x166 <check+0xe4>
	{
		//command(0x88);
		data('-');
 15c:	8d e2       	ldi	r24, 0x2D	; 45
 15e:	86 df       	rcall	.-244    	; 0x6c <data>
		return (77);
 160:	8d e4       	ldi	r24, 0x4D	; 77
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	08 95       	ret
		_delay_ms(2000);
		i++;
	}
	
	// check 4
	PORTD=0x07;
 166:	87 e0       	ldi	r24, 0x07	; 7
 168:	82 bb       	out	0x12, r24	; 18
	if ((PIND & 0b00010111)==0b00000111)
 16a:	80 b3       	in	r24, 0x10	; 16
 16c:	87 71       	andi	r24, 0x17	; 23
 16e:	87 30       	cpi	r24, 0x07	; 7
 170:	29 f4       	brne	.+10     	; 0x17c <check+0xfa>
	{
		//command(0x85);
		command(0x01);
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	69 df       	rcall	.-302    	; 0x48 <command>
		return (999);						// this is for the button ON/C
 176:	87 ee       	ldi	r24, 0xE7	; 231
 178:	93 e0       	ldi	r25, 0x03	; 3
 17a:	08 95       	ret
		i=0;
	}
	else if ((PIND & 0b00100111)==0b00000111)
 17c:	80 b3       	in	r24, 0x10	; 16
 17e:	87 72       	andi	r24, 0x27	; 39
 180:	87 30       	cpi	r24, 0x07	; 7
 182:	29 f4       	brne	.+10     	; 0x18e <check+0x10c>
	{
		//command(0x86);
		data('0');
 184:	80 e3       	ldi	r24, 0x30	; 48
 186:	72 df       	rcall	.-284    	; 0x6c <data>
		return (0);
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	08 95       	ret
		_delay_ms(2000);
		i++;
	}
	else if ((PIND & 0b01000111)==0b00000111)
 18e:	80 b3       	in	r24, 0x10	; 16
 190:	87 74       	andi	r24, 0x47	; 71
 192:	87 30       	cpi	r24, 0x07	; 7
 194:	b1 f0       	breq	.+44     	; 0x1c2 <check+0x140>
		//command(0x87);
		return (888);						//	this is for symbol '='
		_delay_ms(2000);
		i++;
	}
	else if ((PIND & 0b10000111)==0b00000111)
 196:	80 b3       	in	r24, 0x10	; 16
 198:	87 78       	andi	r24, 0x87	; 135
 19a:	87 30       	cpi	r24, 0x07	; 7
 19c:	29 f4       	brne	.+10     	; 0x1a8 <check+0x126>
	{
		//command(0x88);
		data('+');
 19e:	8b e2       	ldi	r24, 0x2B	; 43
 1a0:	65 df       	rcall	.-310    	; 0x6c <data>
		return (66);
 1a2:	82 e4       	ldi	r24, 0x42	; 66
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	08 95       	ret
		_delay_ms(2000);
		i++;
	}
	if(i==16)
 1a8:	80 91 60 00 	lds	r24, 0x0060
 1ac:	90 91 61 00 	lds	r25, 0x0061
 1b0:	40 97       	sbiw	r24, 0x10	; 16
 1b2:	31 f4       	brne	.+12     	; 0x1c0 <check+0x13e>
	{
		i=0;
 1b4:	10 92 61 00 	sts	0x0061, r1
 1b8:	10 92 60 00 	sts	0x0060, r1
		command(0x01);
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	44 df       	rcall	.-376    	; 0x48 <command>
 1c0:	08 95       	ret
		i++;
	}
	else if ((PIND & 0b01000111)==0b00000111)
	{
		//command(0x87);
		return (888);						//	this is for symbol '='
 1c2:	88 e7       	ldi	r24, 0x78	; 120
 1c4:	93 e0       	ldi	r25, 0x03	; 3
	if(i==16)
	{
		i=0;
		command(0x01);
	}
}
 1c6:	08 95       	ret

000001c8 <main>:

int check();		//keypad button press check
int main(void)
{
	
	DDRD=0x0f;
 1c8:	8f e0       	ldi	r24, 0x0F	; 15
 1ca:	81 bb       	out	0x11, r24	; 17
	DDRC=0Xff;
 1cc:	8f ef       	ldi	r24, 0xFF	; 255
 1ce:	84 bb       	out	0x14, r24	; 20
	DDRB=0xff;
 1d0:	87 bb       	out	0x17, r24	; 23
	lcd_init();
 1d2:	45 df       	rcall	.-374    	; 0x5e <lcd_init>
	int a;
    while(1)
    {
		PORTD=0xf0;			//ROWS will be given 0 and COLUMNS will be given 1
 1d4:	c0 ef       	ldi	r28, 0xF0	; 240
 1d6:	c2 bb       	out	0x12, r28	; 18
							//COLUMNS are assigned as i/p so they will monitor weather i/p data is high or not
							//Rows are assigned as o/p and will logically assign LOW to the respective COLUMN when key is pressed
		if((PIND & 0xf0)!=0xf0);
 1d8:	80 b3       	in	r24, 0x10	; 16
		{
			
			a=check();
 1da:	53 df       	rcall	.-346    	; 0x82 <check>
 1dc:	fc cf       	rjmp	.-8      	; 0x1d6 <main+0xe>

000001de <_exit>:
 1de:	f8 94       	cli

000001e0 <__stop_program>:
 1e0:	ff cf       	rjmp	.-2      	; 0x1e0 <__stop_program>
