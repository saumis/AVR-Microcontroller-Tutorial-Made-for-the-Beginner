
keypad interface easy.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000334  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000334  000003c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  000003c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003c8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000003f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000645  00000000  00000000  00000438  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000189  00000000  00000000  00000a7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000239  00000000  00000000  00000c06  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00000e40  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001ab  00000000  00000000  00000ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000039e  00000000  00000000  0000104f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000013ed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a2 36       	cpi	r26, 0x62	; 98
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	6b d1       	rcall	.+726    	; 0x31a <main>
  44:	75 c1       	rjmp	.+746    	; 0x330 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <command>:
	//command(0x0e);						//to show cursor
	//command(0x01);						//to clear LCD completely and reset registers
}
void command(unsigned char a)					// to give command to LCD like which position we want to show data
{
	PORTB=a;						// to send value of a to data pins
  48:	88 bb       	out	0x18, r24	; 24
	PORTC &= 0xfe;						//Rs = 0	 to tell LCD that value on data pin is command
  4a:	a8 98       	cbi	0x15, 0	; 21
	PORTC |=0x02;						//Enable=1 to get data transfer pulse(logic 1)
  4c:	a9 9a       	sbi	0x15, 1	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  4e:	83 ec       	ldi	r24, 0xC3	; 195
  50:	99 e0       	ldi	r25, 0x09	; 9
  52:	01 97       	sbiw	r24, 0x01	; 1
  54:	f1 f7       	brne	.-4      	; 0x52 <command+0xa>
  56:	00 c0       	rjmp	.+0      	; 0x58 <command+0x10>
  58:	00 00       	nop
	_delay_ms(10);
	PORTC &=0xfd;						//Enable=0 to get data transfer pulse(logic 0)
  5a:	a9 98       	cbi	0x15, 1	; 21
  5c:	08 95       	ret

0000005e <lcd_init>:
}

// func declaration LCD interface
void lcd_init()							// to initialize LCD
{
	command(0x38);						//LCD init basic command
  5e:	88 e3       	ldi	r24, 0x38	; 56
  60:	f3 df       	rcall	.-26     	; 0x48 <command>
	command(0x06);						//LCD init basic command
  62:	86 e0       	ldi	r24, 0x06	; 6
  64:	f1 df       	rcall	.-30     	; 0x48 <command>
	command(0x0c);						//to hide cursor
  66:	8c e0       	ldi	r24, 0x0C	; 12
  68:	ef df       	rcall	.-34     	; 0x48 <command>
  6a:	08 95       	ret

0000006c <data>:
	_delay_ms(10);
	PORTC &=0xfd;						//Enable=0 to get data transfer pulse(logic 0)
}
void data(unsigned char a)
{
	PORTB=a;
  6c:	88 bb       	out	0x18, r24	; 24
	PORTC |=0x01;						// Rs=1	to tell LCD that value on data pins is DATA
  6e:	a8 9a       	sbi	0x15, 0	; 21
	PORTC |=0x02;
  70:	a9 9a       	sbi	0x15, 1	; 21
  72:	83 ec       	ldi	r24, 0xC3	; 195
  74:	99 e0       	ldi	r25, 0x09	; 9
  76:	01 97       	sbiw	r24, 0x01	; 1
  78:	f1 f7       	brne	.-4      	; 0x76 <data+0xa>
  7a:	00 c0       	rjmp	.+0      	; 0x7c <data+0x10>
  7c:	00 00       	nop
	_delay_ms(10);
	PORTC &=0xfd;
  7e:	a9 98       	cbi	0x15, 1	; 21
  80:	08 95       	ret

00000082 <check>:
void check()
{
	
	char key[16]={'7','8','9','/','4','5','6','*','1','2','3','-','C','0','=','+'};
	// check 1
	PORTD=0xfe;
  82:	8e ef       	ldi	r24, 0xFE	; 254
  84:	82 bb       	out	0x12, r24	; 18
	if ((PIND & 0xfe)==0x7e)
  86:	80 b3       	in	r24, 0x10	; 16
  88:	8e 7f       	andi	r24, 0xFE	; 254
  8a:	8e 37       	cpi	r24, 0x7E	; 126
  8c:	a9 f4       	brne	.+42     	; 0xb8 <check+0x36>
	{
		//command(i);
		data(key[0]);
  8e:	87 e3       	ldi	r24, 0x37	; 55
  90:	ed df       	rcall	.-38     	; 0x6c <data>
  92:	2f e7       	ldi	r18, 0x7F	; 127
  94:	8a e1       	ldi	r24, 0x1A	; 26
  96:	96 e0       	ldi	r25, 0x06	; 6
  98:	21 50       	subi	r18, 0x01	; 1
  9a:	80 40       	sbci	r24, 0x00	; 0
  9c:	90 40       	sbci	r25, 0x00	; 0
  9e:	e1 f7       	brne	.-8      	; 0x98 <check+0x16>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <check+0x20>
  a2:	00 00       	nop
		_delay_ms(2000);
		i++;
  a4:	80 91 60 00 	lds	r24, 0x0060
  a8:	90 91 61 00 	lds	r25, 0x0061
  ac:	01 96       	adiw	r24, 0x01	; 1
  ae:	90 93 61 00 	sts	0x0061, r25
  b2:	80 93 60 00 	sts	0x0060, r24
  b6:	4a c0       	rjmp	.+148    	; 0x14c <check+0xca>
	}
	else if ((PIND & 0xfe)==0xbe)
  b8:	80 b3       	in	r24, 0x10	; 16
  ba:	8e 7f       	andi	r24, 0xFE	; 254
  bc:	8e 3b       	cpi	r24, 0xBE	; 190
  be:	a9 f4       	brne	.+42     	; 0xea <check+0x68>
	{
		//command(i);
		data(key[1]);
  c0:	88 e3       	ldi	r24, 0x38	; 56
  c2:	d4 df       	rcall	.-88     	; 0x6c <data>
  c4:	2f e7       	ldi	r18, 0x7F	; 127
  c6:	8a e1       	ldi	r24, 0x1A	; 26
  c8:	96 e0       	ldi	r25, 0x06	; 6
  ca:	21 50       	subi	r18, 0x01	; 1
  cc:	80 40       	sbci	r24, 0x00	; 0
  ce:	90 40       	sbci	r25, 0x00	; 0
  d0:	e1 f7       	brne	.-8      	; 0xca <check+0x48>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <check+0x52>
  d4:	00 00       	nop
		_delay_ms(2000);
		i++;
  d6:	80 91 60 00 	lds	r24, 0x0060
  da:	90 91 61 00 	lds	r25, 0x0061
  de:	01 96       	adiw	r24, 0x01	; 1
  e0:	90 93 61 00 	sts	0x0061, r25
  e4:	80 93 60 00 	sts	0x0060, r24
  e8:	31 c0       	rjmp	.+98     	; 0x14c <check+0xca>
	}
	else if ((PIND & 0xfe)==0xde)
  ea:	80 b3       	in	r24, 0x10	; 16
  ec:	8e 7f       	andi	r24, 0xFE	; 254
  ee:	8e 3d       	cpi	r24, 0xDE	; 222
  f0:	a9 f4       	brne	.+42     	; 0x11c <check+0x9a>
	{
		//command(i);
		data(key[2]);
  f2:	89 e3       	ldi	r24, 0x39	; 57
  f4:	bb df       	rcall	.-138    	; 0x6c <data>
  f6:	2f e7       	ldi	r18, 0x7F	; 127
  f8:	8a e1       	ldi	r24, 0x1A	; 26
  fa:	96 e0       	ldi	r25, 0x06	; 6
  fc:	21 50       	subi	r18, 0x01	; 1
  fe:	80 40       	sbci	r24, 0x00	; 0
 100:	90 40       	sbci	r25, 0x00	; 0
 102:	e1 f7       	brne	.-8      	; 0xfc <check+0x7a>
 104:	00 c0       	rjmp	.+0      	; 0x106 <check+0x84>
 106:	00 00       	nop
		_delay_ms(2000);
		i++;
 108:	80 91 60 00 	lds	r24, 0x0060
 10c:	90 91 61 00 	lds	r25, 0x0061
 110:	01 96       	adiw	r24, 0x01	; 1
 112:	90 93 61 00 	sts	0x0061, r25
 116:	80 93 60 00 	sts	0x0060, r24
 11a:	18 c0       	rjmp	.+48     	; 0x14c <check+0xca>
	}
	else if ((PIND & 0xfe)==0xee)
 11c:	80 b3       	in	r24, 0x10	; 16
 11e:	8e 7f       	andi	r24, 0xFE	; 254
 120:	8e 3e       	cpi	r24, 0xEE	; 238
 122:	a1 f4       	brne	.+40     	; 0x14c <check+0xca>
	{
		//command(i);
		data(key[3]);
 124:	8f e2       	ldi	r24, 0x2F	; 47
 126:	a2 df       	rcall	.-188    	; 0x6c <data>
 128:	2f e7       	ldi	r18, 0x7F	; 127
 12a:	8a e1       	ldi	r24, 0x1A	; 26
 12c:	96 e0       	ldi	r25, 0x06	; 6
 12e:	21 50       	subi	r18, 0x01	; 1
 130:	80 40       	sbci	r24, 0x00	; 0
 132:	90 40       	sbci	r25, 0x00	; 0
 134:	e1 f7       	brne	.-8      	; 0x12e <check+0xac>
 136:	00 c0       	rjmp	.+0      	; 0x138 <check+0xb6>
 138:	00 00       	nop
		_delay_ms(2000);
		i++;
 13a:	80 91 60 00 	lds	r24, 0x0060
 13e:	90 91 61 00 	lds	r25, 0x0061
 142:	01 96       	adiw	r24, 0x01	; 1
 144:	90 93 61 00 	sts	0x0061, r25
 148:	80 93 60 00 	sts	0x0060, r24
	}
	
	// check 2
	PORTD=0xfd;
 14c:	8d ef       	ldi	r24, 0xFD	; 253
 14e:	82 bb       	out	0x12, r24	; 18
	if ((PIND & 0xfd)==0x7d)
 150:	80 b3       	in	r24, 0x10	; 16
 152:	8d 7f       	andi	r24, 0xFD	; 253
 154:	8d 37       	cpi	r24, 0x7D	; 125
 156:	a9 f4       	brne	.+42     	; 0x182 <check+0x100>
	{
		//command(i);
		data(key[4]);
 158:	84 e3       	ldi	r24, 0x34	; 52
 15a:	88 df       	rcall	.-240    	; 0x6c <data>
 15c:	2f e7       	ldi	r18, 0x7F	; 127
 15e:	8a e1       	ldi	r24, 0x1A	; 26
 160:	96 e0       	ldi	r25, 0x06	; 6
 162:	21 50       	subi	r18, 0x01	; 1
 164:	80 40       	sbci	r24, 0x00	; 0
 166:	90 40       	sbci	r25, 0x00	; 0
 168:	e1 f7       	brne	.-8      	; 0x162 <check+0xe0>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <check+0xea>
 16c:	00 00       	nop
		_delay_ms(2000);
		i++;
 16e:	80 91 60 00 	lds	r24, 0x0060
 172:	90 91 61 00 	lds	r25, 0x0061
 176:	01 96       	adiw	r24, 0x01	; 1
 178:	90 93 61 00 	sts	0x0061, r25
 17c:	80 93 60 00 	sts	0x0060, r24
 180:	4a c0       	rjmp	.+148    	; 0x216 <check+0x194>
	}
	else if ((PIND & 0xfd)==0xbd)
 182:	80 b3       	in	r24, 0x10	; 16
 184:	8d 7f       	andi	r24, 0xFD	; 253
 186:	8d 3b       	cpi	r24, 0xBD	; 189
 188:	a9 f4       	brne	.+42     	; 0x1b4 <check+0x132>
	{
		//command(i);
		data(key[5]);
 18a:	85 e3       	ldi	r24, 0x35	; 53
 18c:	6f df       	rcall	.-290    	; 0x6c <data>
 18e:	2f e7       	ldi	r18, 0x7F	; 127
 190:	8a e1       	ldi	r24, 0x1A	; 26
 192:	96 e0       	ldi	r25, 0x06	; 6
 194:	21 50       	subi	r18, 0x01	; 1
 196:	80 40       	sbci	r24, 0x00	; 0
 198:	90 40       	sbci	r25, 0x00	; 0
 19a:	e1 f7       	brne	.-8      	; 0x194 <check+0x112>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <check+0x11c>
 19e:	00 00       	nop
		_delay_ms(2000);
		i++;
 1a0:	80 91 60 00 	lds	r24, 0x0060
 1a4:	90 91 61 00 	lds	r25, 0x0061
 1a8:	01 96       	adiw	r24, 0x01	; 1
 1aa:	90 93 61 00 	sts	0x0061, r25
 1ae:	80 93 60 00 	sts	0x0060, r24
 1b2:	31 c0       	rjmp	.+98     	; 0x216 <check+0x194>
	}
	else if ((PIND & 0xfd)==0xdd)
 1b4:	80 b3       	in	r24, 0x10	; 16
 1b6:	8d 7f       	andi	r24, 0xFD	; 253
 1b8:	8d 3d       	cpi	r24, 0xDD	; 221
 1ba:	a9 f4       	brne	.+42     	; 0x1e6 <check+0x164>
	{
		//command(0x80);
		data(key[6]);
 1bc:	86 e3       	ldi	r24, 0x36	; 54
 1be:	56 df       	rcall	.-340    	; 0x6c <data>
 1c0:	2f e7       	ldi	r18, 0x7F	; 127
 1c2:	8a e1       	ldi	r24, 0x1A	; 26
 1c4:	96 e0       	ldi	r25, 0x06	; 6
 1c6:	21 50       	subi	r18, 0x01	; 1
 1c8:	80 40       	sbci	r24, 0x00	; 0
 1ca:	90 40       	sbci	r25, 0x00	; 0
 1cc:	e1 f7       	brne	.-8      	; 0x1c6 <check+0x144>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <check+0x14e>
 1d0:	00 00       	nop
		_delay_ms(2000);
		i++;
 1d2:	80 91 60 00 	lds	r24, 0x0060
 1d6:	90 91 61 00 	lds	r25, 0x0061
 1da:	01 96       	adiw	r24, 0x01	; 1
 1dc:	90 93 61 00 	sts	0x0061, r25
 1e0:	80 93 60 00 	sts	0x0060, r24
 1e4:	18 c0       	rjmp	.+48     	; 0x216 <check+0x194>
	}
	else if ((PIND & 0xfd)==0xed)
 1e6:	80 b3       	in	r24, 0x10	; 16
 1e8:	8d 7f       	andi	r24, 0xFD	; 253
 1ea:	8d 3e       	cpi	r24, 0xED	; 237
 1ec:	a1 f4       	brne	.+40     	; 0x216 <check+0x194>
	{
		//command(0x88);
		data(key[7]);
 1ee:	8a e2       	ldi	r24, 0x2A	; 42
 1f0:	3d df       	rcall	.-390    	; 0x6c <data>
 1f2:	2f e7       	ldi	r18, 0x7F	; 127
 1f4:	8a e1       	ldi	r24, 0x1A	; 26
 1f6:	96 e0       	ldi	r25, 0x06	; 6
 1f8:	21 50       	subi	r18, 0x01	; 1
 1fa:	80 40       	sbci	r24, 0x00	; 0
 1fc:	90 40       	sbci	r25, 0x00	; 0
 1fe:	e1 f7       	brne	.-8      	; 0x1f8 <check+0x176>
 200:	00 c0       	rjmp	.+0      	; 0x202 <check+0x180>
 202:	00 00       	nop
		_delay_ms(2000);
		i++;
 204:	80 91 60 00 	lds	r24, 0x0060
 208:	90 91 61 00 	lds	r25, 0x0061
 20c:	01 96       	adiw	r24, 0x01	; 1
 20e:	90 93 61 00 	sts	0x0061, r25
 212:	80 93 60 00 	sts	0x0060, r24
	}
	
	// check 3
	PORTD=0xdb;
 216:	8b ed       	ldi	r24, 0xDB	; 219
 218:	82 bb       	out	0x12, r24	; 18
	if ((PIND & 0xdb)==0x7b)
 21a:	80 b3       	in	r24, 0x10	; 16
		//command(0x85);
		data(key[8]);
		_delay_ms(2000);
		i++;
	}
	else if ((PIND & 0xdb)==0xbb)
 21c:	80 b3       	in	r24, 0x10	; 16
		//command(0x86);
		data(key[9]);
		_delay_ms(2000);
		i++;
	}
	else if ((PIND & 0xdb)==0xdb)
 21e:	80 b3       	in	r24, 0x10	; 16
 220:	8b 7d       	andi	r24, 0xDB	; 219
 222:	8b 3d       	cpi	r24, 0xDB	; 219
 224:	a9 f4       	brne	.+42     	; 0x250 <check+0x1ce>
	{
		//command(0x87);
		data(key[10]);
 226:	83 e3       	ldi	r24, 0x33	; 51
 228:	21 df       	rcall	.-446    	; 0x6c <data>
 22a:	2f e7       	ldi	r18, 0x7F	; 127
 22c:	8a e1       	ldi	r24, 0x1A	; 26
 22e:	96 e0       	ldi	r25, 0x06	; 6
 230:	21 50       	subi	r18, 0x01	; 1
 232:	80 40       	sbci	r24, 0x00	; 0
 234:	90 40       	sbci	r25, 0x00	; 0
 236:	e1 f7       	brne	.-8      	; 0x230 <check+0x1ae>
 238:	00 c0       	rjmp	.+0      	; 0x23a <check+0x1b8>
 23a:	00 00       	nop
		_delay_ms(2000);
		i++;
 23c:	80 91 60 00 	lds	r24, 0x0060
 240:	90 91 61 00 	lds	r25, 0x0061
 244:	01 96       	adiw	r24, 0x01	; 1
 246:	90 93 61 00 	sts	0x0061, r25
 24a:	80 93 60 00 	sts	0x0060, r24
 24e:	01 c0       	rjmp	.+2      	; 0x252 <check+0x1d0>
	}
	else if ((PIND & 0xdb)==0xeb)
 250:	80 b3       	in	r24, 0x10	; 16
		_delay_ms(2000);
		i++;
	}
	
	// check 4
	PORTD=0xf7;
 252:	87 ef       	ldi	r24, 0xF7	; 247
 254:	82 bb       	out	0x12, r24	; 18
	if ((PIND & 0xf7)==0x77)
 256:	80 b3       	in	r24, 0x10	; 16
 258:	87 7f       	andi	r24, 0xF7	; 247
 25a:	87 37       	cpi	r24, 0x77	; 119
 25c:	39 f4       	brne	.+14     	; 0x26c <check+0x1ea>
	{
		//command(0x85);
		command(0x01);
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	f3 de       	rcall	.-538    	; 0x48 <command>
		
		i=0;
 262:	10 92 61 00 	sts	0x0061, r1
 266:	10 92 60 00 	sts	0x0060, r1
 26a:	08 95       	ret
	}
	else if ((PIND & 0xf7)==0xb7)
 26c:	80 b3       	in	r24, 0x10	; 16
 26e:	87 7f       	andi	r24, 0xF7	; 247
 270:	87 3b       	cpi	r24, 0xB7	; 183
 272:	a9 f4       	brne	.+42     	; 0x29e <check+0x21c>
	{
		//command(0x86);
		data(key[13]);
 274:	80 e3       	ldi	r24, 0x30	; 48
 276:	fa de       	rcall	.-524    	; 0x6c <data>
 278:	2f e7       	ldi	r18, 0x7F	; 127
 27a:	8a e1       	ldi	r24, 0x1A	; 26
 27c:	96 e0       	ldi	r25, 0x06	; 6
 27e:	21 50       	subi	r18, 0x01	; 1
 280:	80 40       	sbci	r24, 0x00	; 0
 282:	90 40       	sbci	r25, 0x00	; 0
 284:	e1 f7       	brne	.-8      	; 0x27e <check+0x1fc>
 286:	00 c0       	rjmp	.+0      	; 0x288 <check+0x206>
 288:	00 00       	nop
		_delay_ms(2000);
		i++;
 28a:	80 91 60 00 	lds	r24, 0x0060
 28e:	90 91 61 00 	lds	r25, 0x0061
 292:	01 96       	adiw	r24, 0x01	; 1
 294:	90 93 61 00 	sts	0x0061, r25
 298:	80 93 60 00 	sts	0x0060, r24
 29c:	31 c0       	rjmp	.+98     	; 0x300 <check+0x27e>
	}
	else if ((PIND & 0xf7)==0xd7)
 29e:	80 b3       	in	r24, 0x10	; 16
 2a0:	87 7f       	andi	r24, 0xF7	; 247
 2a2:	87 3d       	cpi	r24, 0xD7	; 215
 2a4:	a9 f4       	brne	.+42     	; 0x2d0 <check+0x24e>
	{
		//command(0x87);
		data(key[14]);
 2a6:	8d e3       	ldi	r24, 0x3D	; 61
 2a8:	e1 de       	rcall	.-574    	; 0x6c <data>
 2aa:	2f e7       	ldi	r18, 0x7F	; 127
 2ac:	8a e1       	ldi	r24, 0x1A	; 26
 2ae:	96 e0       	ldi	r25, 0x06	; 6
 2b0:	21 50       	subi	r18, 0x01	; 1
 2b2:	80 40       	sbci	r24, 0x00	; 0
 2b4:	90 40       	sbci	r25, 0x00	; 0
 2b6:	e1 f7       	brne	.-8      	; 0x2b0 <check+0x22e>
 2b8:	00 c0       	rjmp	.+0      	; 0x2ba <check+0x238>
 2ba:	00 00       	nop
		_delay_ms(2000);
		i++;
 2bc:	80 91 60 00 	lds	r24, 0x0060
 2c0:	90 91 61 00 	lds	r25, 0x0061
 2c4:	01 96       	adiw	r24, 0x01	; 1
 2c6:	90 93 61 00 	sts	0x0061, r25
 2ca:	80 93 60 00 	sts	0x0060, r24
 2ce:	18 c0       	rjmp	.+48     	; 0x300 <check+0x27e>
	}
	else if ((PIND & 0xf7)==0xe7)
 2d0:	80 b3       	in	r24, 0x10	; 16
 2d2:	87 7f       	andi	r24, 0xF7	; 247
 2d4:	87 3e       	cpi	r24, 0xE7	; 231
 2d6:	a1 f4       	brne	.+40     	; 0x300 <check+0x27e>
	{
		//command(0x88);
		data(key[15]);
 2d8:	8b e2       	ldi	r24, 0x2B	; 43
 2da:	c8 de       	rcall	.-624    	; 0x6c <data>
 2dc:	2f e7       	ldi	r18, 0x7F	; 127
 2de:	8a e1       	ldi	r24, 0x1A	; 26
 2e0:	96 e0       	ldi	r25, 0x06	; 6
 2e2:	21 50       	subi	r18, 0x01	; 1
 2e4:	80 40       	sbci	r24, 0x00	; 0
 2e6:	90 40       	sbci	r25, 0x00	; 0
 2e8:	e1 f7       	brne	.-8      	; 0x2e2 <check+0x260>
 2ea:	00 c0       	rjmp	.+0      	; 0x2ec <check+0x26a>
 2ec:	00 00       	nop
		_delay_ms(2000);
		i++;
 2ee:	80 91 60 00 	lds	r24, 0x0060
 2f2:	90 91 61 00 	lds	r25, 0x0061
 2f6:	01 96       	adiw	r24, 0x01	; 1
 2f8:	90 93 61 00 	sts	0x0061, r25
 2fc:	80 93 60 00 	sts	0x0060, r24
	}
	if(i==16)
 300:	80 91 60 00 	lds	r24, 0x0060
 304:	90 91 61 00 	lds	r25, 0x0061
 308:	40 97       	sbiw	r24, 0x10	; 16
 30a:	31 f4       	brne	.+12     	; 0x318 <check+0x296>
	{
		i=0;
 30c:	10 92 61 00 	sts	0x0061, r1
 310:	10 92 60 00 	sts	0x0060, r1
		command(0x01);
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	98 de       	rcall	.-720    	; 0x48 <command>
 318:	08 95       	ret

0000031a <main>:
void data(unsigned char a);

void check();		//keypad button press check
int main(void)
{
	DDRD=0x0f;
 31a:	8f e0       	ldi	r24, 0x0F	; 15
 31c:	81 bb       	out	0x11, r24	; 17
	DDRC=0Xff;
 31e:	8f ef       	ldi	r24, 0xFF	; 255
 320:	84 bb       	out	0x14, r24	; 20
	DDRB=0xff;
 322:	87 bb       	out	0x17, r24	; 23
	lcd_init();
 324:	9c de       	rcall	.-712    	; 0x5e <lcd_init>
	
    while(1)
    {
		PORTD=0xf0;			//ROWS will be given 0 and COLUMNS will be given 1
 326:	c0 ef       	ldi	r28, 0xF0	; 240
 328:	c2 bb       	out	0x12, r28	; 18
							//COLUMNS are assigned as i/p so they will monitor weather i/p data is high or not
							//Rows are assigned as o/p and will logically assign LOW to the respective COLUMN when key is pressed
		if((PORTD & 0xf0)!=0xf0);
 32a:	82 b3       	in	r24, 0x12	; 18
		{
			check();		
 32c:	aa de       	rcall	.-684    	; 0x82 <check>
 32e:	fc cf       	rjmp	.-8      	; 0x328 <main+0xe>

00000330 <_exit>:
 330:	f8 94       	cli

00000332 <__stop_program>:
 332:	ff cf       	rjmp	.-2      	; 0x332 <__stop_program>
