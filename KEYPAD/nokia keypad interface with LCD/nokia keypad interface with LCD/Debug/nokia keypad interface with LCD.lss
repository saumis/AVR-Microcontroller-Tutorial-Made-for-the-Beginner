
nokia keypad interface with LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000316  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000316  000003aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  000003aa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003aa  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000003da  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005c8  00000000  00000000  0000041a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000168  00000000  00000000  000009e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000239  00000000  00000000  00000b4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00000d84  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001c0  00000000  00000000  00000de8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000039e  00000000  00000000  00000fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001346  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a2 36       	cpi	r26, 0x62	; 98
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	5c d1       	rcall	.+696    	; 0x2fc <main>
  44:	66 c1       	rjmp	.+716    	; 0x312 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <command>:
	//command(0x0e);						//to show cursor
	//command(0x01);						//to clear LCD completely and reset registers
}
void command(unsigned char a)					// to give command to LCD like which position we want to show data
{
	PORTB=a;						// to send value of a to data pins
  48:	88 bb       	out	0x18, r24	; 24
	PORTC &= 0xfe;						//Rs = 0	 to tell LCD that value on data pin is command
  4a:	a8 98       	cbi	0x15, 0	; 21
	PORTC |=0x02;						//Enable=1 to get data transfer pulse(logic 1)
  4c:	a9 9a       	sbi	0x15, 1	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  4e:	83 ec       	ldi	r24, 0xC3	; 195
  50:	99 e0       	ldi	r25, 0x09	; 9
  52:	01 97       	sbiw	r24, 0x01	; 1
  54:	f1 f7       	brne	.-4      	; 0x52 <command+0xa>
  56:	00 c0       	rjmp	.+0      	; 0x58 <command+0x10>
  58:	00 00       	nop
	_delay_ms(10);
	PORTC &=0xfd;						//Enable=0 to get data transfer pulse(logic 0)
  5a:	a9 98       	cbi	0x15, 1	; 21
  5c:	08 95       	ret

0000005e <lcd_init>:
}

// func declaration LCD interface
void lcd_init()							// to initialize LCD
{
	command(0x38);						//LCD init basic command
  5e:	88 e3       	ldi	r24, 0x38	; 56
  60:	f3 df       	rcall	.-26     	; 0x48 <command>
	command(0x06);						//LCD init basic command
  62:	86 e0       	ldi	r24, 0x06	; 6
  64:	f1 df       	rcall	.-30     	; 0x48 <command>
	command(0x0c);						//to hide cursor
  66:	8c e0       	ldi	r24, 0x0C	; 12
  68:	ef df       	rcall	.-34     	; 0x48 <command>
  6a:	08 95       	ret

0000006c <data>:
	_delay_ms(10);
	PORTC &=0xfd;						//Enable=0 to get data transfer pulse(logic 0)
}
void data(unsigned char a)
{
	PORTB=a;
  6c:	88 bb       	out	0x18, r24	; 24
	PORTC |=0x01;						// Rs=1	to tell LCD that value on data pins is DATA
  6e:	a8 9a       	sbi	0x15, 0	; 21
	PORTC |=0x02;
  70:	a9 9a       	sbi	0x15, 1	; 21
  72:	83 ec       	ldi	r24, 0xC3	; 195
  74:	99 e0       	ldi	r25, 0x09	; 9
  76:	01 97       	sbiw	r24, 0x01	; 1
  78:	f1 f7       	brne	.-4      	; 0x76 <data+0xa>
  7a:	00 c0       	rjmp	.+0      	; 0x7c <data+0x10>
  7c:	00 00       	nop
	_delay_ms(10);
	PORTC &=0xfd;
  7e:	a9 98       	cbi	0x15, 1	; 21
  80:	08 95       	ret

00000082 <check>:

void check()
{
	
	// check 1
	PORTD=0x0e;
  82:	8e e0       	ldi	r24, 0x0E	; 14
  84:	82 bb       	out	0x12, r24	; 18
	if ((PIND & 0b00011110)==0b00001110)
  86:	80 b3       	in	r24, 0x10	; 16
  88:	8e 71       	andi	r24, 0x1E	; 30
  8a:	8e 30       	cpi	r24, 0x0E	; 14
  8c:	a9 f4       	brne	.+42     	; 0xb8 <check+0x36>
	{
		//command(i);
		data('1');
  8e:	81 e3       	ldi	r24, 0x31	; 49
  90:	ed df       	rcall	.-38     	; 0x6c <data>
  92:	2f e7       	ldi	r18, 0x7F	; 127
  94:	8a e1       	ldi	r24, 0x1A	; 26
  96:	96 e0       	ldi	r25, 0x06	; 6
  98:	21 50       	subi	r18, 0x01	; 1
  9a:	80 40       	sbci	r24, 0x00	; 0
  9c:	90 40       	sbci	r25, 0x00	; 0
  9e:	e1 f7       	brne	.-8      	; 0x98 <check+0x16>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <check+0x20>
  a2:	00 00       	nop
		_delay_ms(2000);
		i++;
  a4:	80 91 60 00 	lds	r24, 0x0060
  a8:	90 91 61 00 	lds	r25, 0x0061
  ac:	01 96       	adiw	r24, 0x01	; 1
  ae:	90 93 61 00 	sts	0x0061, r25
  b2:	80 93 60 00 	sts	0x0060, r24
  b6:	31 c0       	rjmp	.+98     	; 0x11a <check+0x98>
	}
	else if ((PIND & 0b00101110)==0b00001110)
  b8:	80 b3       	in	r24, 0x10	; 16
  ba:	8e 72       	andi	r24, 0x2E	; 46
  bc:	8e 30       	cpi	r24, 0x0E	; 14
  be:	a9 f4       	brne	.+42     	; 0xea <check+0x68>
	{
		//command(i);
		data('2');
  c0:	82 e3       	ldi	r24, 0x32	; 50
  c2:	d4 df       	rcall	.-88     	; 0x6c <data>
  c4:	2f e7       	ldi	r18, 0x7F	; 127
  c6:	8a e1       	ldi	r24, 0x1A	; 26
  c8:	96 e0       	ldi	r25, 0x06	; 6
  ca:	21 50       	subi	r18, 0x01	; 1
  cc:	80 40       	sbci	r24, 0x00	; 0
  ce:	90 40       	sbci	r25, 0x00	; 0
  d0:	e1 f7       	brne	.-8      	; 0xca <check+0x48>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <check+0x52>
  d4:	00 00       	nop
		_delay_ms(2000);
		i++;
  d6:	80 91 60 00 	lds	r24, 0x0060
  da:	90 91 61 00 	lds	r25, 0x0061
  de:	01 96       	adiw	r24, 0x01	; 1
  e0:	90 93 61 00 	sts	0x0061, r25
  e4:	80 93 60 00 	sts	0x0060, r24
  e8:	18 c0       	rjmp	.+48     	; 0x11a <check+0x98>
	}
	else if ((PIND & 0b01001110)==0b00001110)
  ea:	80 b3       	in	r24, 0x10	; 16
  ec:	8e 74       	andi	r24, 0x4E	; 78
  ee:	8e 30       	cpi	r24, 0x0E	; 14
  f0:	a1 f4       	brne	.+40     	; 0x11a <check+0x98>
	{
		//command(i);
		data('3');
  f2:	83 e3       	ldi	r24, 0x33	; 51
  f4:	bb df       	rcall	.-138    	; 0x6c <data>
  f6:	2f e7       	ldi	r18, 0x7F	; 127
  f8:	8a e1       	ldi	r24, 0x1A	; 26
  fa:	96 e0       	ldi	r25, 0x06	; 6
  fc:	21 50       	subi	r18, 0x01	; 1
  fe:	80 40       	sbci	r24, 0x00	; 0
 100:	90 40       	sbci	r25, 0x00	; 0
 102:	e1 f7       	brne	.-8      	; 0xfc <check+0x7a>
 104:	00 c0       	rjmp	.+0      	; 0x106 <check+0x84>
 106:	00 00       	nop
		_delay_ms(2000);
		i++;
 108:	80 91 60 00 	lds	r24, 0x0060
 10c:	90 91 61 00 	lds	r25, 0x0061
 110:	01 96       	adiw	r24, 0x01	; 1
 112:	90 93 61 00 	sts	0x0061, r25
 116:	80 93 60 00 	sts	0x0060, r24
	}
	
	// check 2
	PORTD=0x0d;
 11a:	8d e0       	ldi	r24, 0x0D	; 13
 11c:	82 bb       	out	0x12, r24	; 18
	if ((PIND & 0b00011101)==0b00001101)
 11e:	80 b3       	in	r24, 0x10	; 16
 120:	8d 71       	andi	r24, 0x1D	; 29
 122:	8d 30       	cpi	r24, 0x0D	; 13
 124:	a9 f4       	brne	.+42     	; 0x150 <check+0xce>
	{
		//command(i);
		data('4');
 126:	84 e3       	ldi	r24, 0x34	; 52
 128:	a1 df       	rcall	.-190    	; 0x6c <data>
 12a:	2f e7       	ldi	r18, 0x7F	; 127
 12c:	8a e1       	ldi	r24, 0x1A	; 26
 12e:	96 e0       	ldi	r25, 0x06	; 6
 130:	21 50       	subi	r18, 0x01	; 1
 132:	80 40       	sbci	r24, 0x00	; 0
 134:	90 40       	sbci	r25, 0x00	; 0
 136:	e1 f7       	brne	.-8      	; 0x130 <check+0xae>
 138:	00 c0       	rjmp	.+0      	; 0x13a <check+0xb8>
 13a:	00 00       	nop
		_delay_ms(2000);
		i++;
 13c:	80 91 60 00 	lds	r24, 0x0060
 140:	90 91 61 00 	lds	r25, 0x0061
 144:	01 96       	adiw	r24, 0x01	; 1
 146:	90 93 61 00 	sts	0x0061, r25
 14a:	80 93 60 00 	sts	0x0060, r24
 14e:	31 c0       	rjmp	.+98     	; 0x1b2 <check+0x130>
	}
	else if ((PIND & 0b00101101)==0b00001101)
 150:	80 b3       	in	r24, 0x10	; 16
 152:	8d 72       	andi	r24, 0x2D	; 45
 154:	8d 30       	cpi	r24, 0x0D	; 13
 156:	a9 f4       	brne	.+42     	; 0x182 <check+0x100>
	{
		//command(i);
		data('5');
 158:	85 e3       	ldi	r24, 0x35	; 53
 15a:	88 df       	rcall	.-240    	; 0x6c <data>
 15c:	2f e7       	ldi	r18, 0x7F	; 127
 15e:	8a e1       	ldi	r24, 0x1A	; 26
 160:	96 e0       	ldi	r25, 0x06	; 6
 162:	21 50       	subi	r18, 0x01	; 1
 164:	80 40       	sbci	r24, 0x00	; 0
 166:	90 40       	sbci	r25, 0x00	; 0
 168:	e1 f7       	brne	.-8      	; 0x162 <check+0xe0>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <check+0xea>
 16c:	00 00       	nop
		_delay_ms(2000);
		i++;
 16e:	80 91 60 00 	lds	r24, 0x0060
 172:	90 91 61 00 	lds	r25, 0x0061
 176:	01 96       	adiw	r24, 0x01	; 1
 178:	90 93 61 00 	sts	0x0061, r25
 17c:	80 93 60 00 	sts	0x0060, r24
 180:	18 c0       	rjmp	.+48     	; 0x1b2 <check+0x130>
	}
	else if ((PIND & 0b01001101)==0b00001101)
 182:	80 b3       	in	r24, 0x10	; 16
 184:	8d 74       	andi	r24, 0x4D	; 77
 186:	8d 30       	cpi	r24, 0x0D	; 13
 188:	a1 f4       	brne	.+40     	; 0x1b2 <check+0x130>
	{
		//command(0x80);
		data('6');
 18a:	86 e3       	ldi	r24, 0x36	; 54
 18c:	6f df       	rcall	.-290    	; 0x6c <data>
 18e:	2f e7       	ldi	r18, 0x7F	; 127
 190:	8a e1       	ldi	r24, 0x1A	; 26
 192:	96 e0       	ldi	r25, 0x06	; 6
 194:	21 50       	subi	r18, 0x01	; 1
 196:	80 40       	sbci	r24, 0x00	; 0
 198:	90 40       	sbci	r25, 0x00	; 0
 19a:	e1 f7       	brne	.-8      	; 0x194 <check+0x112>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <check+0x11c>
 19e:	00 00       	nop
		_delay_ms(2000);
		i++;
 1a0:	80 91 60 00 	lds	r24, 0x0060
 1a4:	90 91 61 00 	lds	r25, 0x0061
 1a8:	01 96       	adiw	r24, 0x01	; 1
 1aa:	90 93 61 00 	sts	0x0061, r25
 1ae:	80 93 60 00 	sts	0x0060, r24
	}
	
	// check 3
	PORTD=0x0b;
 1b2:	8b e0       	ldi	r24, 0x0B	; 11
 1b4:	82 bb       	out	0x12, r24	; 18
	if ((PIND & 0b00011011)==0b00001011)
 1b6:	80 b3       	in	r24, 0x10	; 16
 1b8:	8b 71       	andi	r24, 0x1B	; 27
 1ba:	8b 30       	cpi	r24, 0x0B	; 11
 1bc:	a9 f4       	brne	.+42     	; 0x1e8 <check+0x166>
	{
		//command(0x85);
		data('7');
 1be:	87 e3       	ldi	r24, 0x37	; 55
 1c0:	55 df       	rcall	.-342    	; 0x6c <data>
 1c2:	2f e7       	ldi	r18, 0x7F	; 127
 1c4:	8a e1       	ldi	r24, 0x1A	; 26
 1c6:	96 e0       	ldi	r25, 0x06	; 6
 1c8:	21 50       	subi	r18, 0x01	; 1
 1ca:	80 40       	sbci	r24, 0x00	; 0
 1cc:	90 40       	sbci	r25, 0x00	; 0
 1ce:	e1 f7       	brne	.-8      	; 0x1c8 <check+0x146>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <check+0x150>
 1d2:	00 00       	nop
		_delay_ms(2000);
		i++;
 1d4:	80 91 60 00 	lds	r24, 0x0060
 1d8:	90 91 61 00 	lds	r25, 0x0061
 1dc:	01 96       	adiw	r24, 0x01	; 1
 1de:	90 93 61 00 	sts	0x0061, r25
 1e2:	80 93 60 00 	sts	0x0060, r24
 1e6:	31 c0       	rjmp	.+98     	; 0x24a <check+0x1c8>
	}
	else if ((PIND & 0b00101011)==0b00001011)
 1e8:	80 b3       	in	r24, 0x10	; 16
 1ea:	8b 72       	andi	r24, 0x2B	; 43
 1ec:	8b 30       	cpi	r24, 0x0B	; 11
 1ee:	a9 f4       	brne	.+42     	; 0x21a <check+0x198>
	{
		//command(0x86);
		data('8');
 1f0:	88 e3       	ldi	r24, 0x38	; 56
 1f2:	3c df       	rcall	.-392    	; 0x6c <data>
 1f4:	2f e7       	ldi	r18, 0x7F	; 127
 1f6:	8a e1       	ldi	r24, 0x1A	; 26
 1f8:	96 e0       	ldi	r25, 0x06	; 6
 1fa:	21 50       	subi	r18, 0x01	; 1
 1fc:	80 40       	sbci	r24, 0x00	; 0
 1fe:	90 40       	sbci	r25, 0x00	; 0
 200:	e1 f7       	brne	.-8      	; 0x1fa <check+0x178>
 202:	00 c0       	rjmp	.+0      	; 0x204 <check+0x182>
 204:	00 00       	nop
		_delay_ms(2000);
		i++;
 206:	80 91 60 00 	lds	r24, 0x0060
 20a:	90 91 61 00 	lds	r25, 0x0061
 20e:	01 96       	adiw	r24, 0x01	; 1
 210:	90 93 61 00 	sts	0x0061, r25
 214:	80 93 60 00 	sts	0x0060, r24
 218:	18 c0       	rjmp	.+48     	; 0x24a <check+0x1c8>
	}
	else if ((PIND & 0b01001011)==0b00001011)
 21a:	80 b3       	in	r24, 0x10	; 16
 21c:	8b 74       	andi	r24, 0x4B	; 75
 21e:	8b 30       	cpi	r24, 0x0B	; 11
 220:	a1 f4       	brne	.+40     	; 0x24a <check+0x1c8>
	{
		//command(0x87);
		data('9');
 222:	89 e3       	ldi	r24, 0x39	; 57
 224:	23 df       	rcall	.-442    	; 0x6c <data>
 226:	2f e7       	ldi	r18, 0x7F	; 127
 228:	8a e1       	ldi	r24, 0x1A	; 26
 22a:	96 e0       	ldi	r25, 0x06	; 6
 22c:	21 50       	subi	r18, 0x01	; 1
 22e:	80 40       	sbci	r24, 0x00	; 0
 230:	90 40       	sbci	r25, 0x00	; 0
 232:	e1 f7       	brne	.-8      	; 0x22c <check+0x1aa>
 234:	00 c0       	rjmp	.+0      	; 0x236 <check+0x1b4>
 236:	00 00       	nop
		_delay_ms(2000);
		i++;
 238:	80 91 60 00 	lds	r24, 0x0060
 23c:	90 91 61 00 	lds	r25, 0x0061
 240:	01 96       	adiw	r24, 0x01	; 1
 242:	90 93 61 00 	sts	0x0061, r25
 246:	80 93 60 00 	sts	0x0060, r24
	}
	
	// check 4
	PORTD=0x07;
 24a:	87 e0       	ldi	r24, 0x07	; 7
 24c:	82 bb       	out	0x12, r24	; 18
	if ((PIND & 0b00010111)==0b00000111)
 24e:	80 b3       	in	r24, 0x10	; 16
 250:	87 71       	andi	r24, 0x17	; 23
 252:	87 30       	cpi	r24, 0x07	; 7
 254:	a9 f4       	brne	.+42     	; 0x280 <check+0x1fe>
	{
		//command(0x85);
		command('*');
 256:	8a e2       	ldi	r24, 0x2A	; 42
 258:	f7 de       	rcall	.-530    	; 0x48 <command>
 25a:	2f e7       	ldi	r18, 0x7F	; 127
 25c:	8a e1       	ldi	r24, 0x1A	; 26
 25e:	96 e0       	ldi	r25, 0x06	; 6
 260:	21 50       	subi	r18, 0x01	; 1
 262:	80 40       	sbci	r24, 0x00	; 0
 264:	90 40       	sbci	r25, 0x00	; 0
 266:	e1 f7       	brne	.-8      	; 0x260 <check+0x1de>
 268:	00 c0       	rjmp	.+0      	; 0x26a <check+0x1e8>
 26a:	00 00       	nop
		_delay_ms(2000);
		i++;
 26c:	80 91 60 00 	lds	r24, 0x0060
 270:	90 91 61 00 	lds	r25, 0x0061
 274:	01 96       	adiw	r24, 0x01	; 1
 276:	90 93 61 00 	sts	0x0061, r25
 27a:	80 93 60 00 	sts	0x0060, r24
 27e:	31 c0       	rjmp	.+98     	; 0x2e2 <check+0x260>
	}
	else if ((PIND & 0b00100111)==0b00000111)
 280:	80 b3       	in	r24, 0x10	; 16
 282:	87 72       	andi	r24, 0x27	; 39
 284:	87 30       	cpi	r24, 0x07	; 7
 286:	a9 f4       	brne	.+42     	; 0x2b2 <check+0x230>
	{
		//command(0x86);
		data('0');
 288:	80 e3       	ldi	r24, 0x30	; 48
 28a:	f0 de       	rcall	.-544    	; 0x6c <data>
 28c:	2f e7       	ldi	r18, 0x7F	; 127
 28e:	8a e1       	ldi	r24, 0x1A	; 26
 290:	96 e0       	ldi	r25, 0x06	; 6
 292:	21 50       	subi	r18, 0x01	; 1
 294:	80 40       	sbci	r24, 0x00	; 0
 296:	90 40       	sbci	r25, 0x00	; 0
 298:	e1 f7       	brne	.-8      	; 0x292 <check+0x210>
 29a:	00 c0       	rjmp	.+0      	; 0x29c <check+0x21a>
 29c:	00 00       	nop
		_delay_ms(2000);
		i++;
 29e:	80 91 60 00 	lds	r24, 0x0060
 2a2:	90 91 61 00 	lds	r25, 0x0061
 2a6:	01 96       	adiw	r24, 0x01	; 1
 2a8:	90 93 61 00 	sts	0x0061, r25
 2ac:	80 93 60 00 	sts	0x0060, r24
 2b0:	18 c0       	rjmp	.+48     	; 0x2e2 <check+0x260>
	}
	else if ((PIND & 0b01000111)==0b00000111)
 2b2:	80 b3       	in	r24, 0x10	; 16
 2b4:	87 74       	andi	r24, 0x47	; 71
 2b6:	87 30       	cpi	r24, 0x07	; 7
 2b8:	a1 f4       	brne	.+40     	; 0x2e2 <check+0x260>
	{
		//command(0x87);
		data('#');
 2ba:	83 e2       	ldi	r24, 0x23	; 35
 2bc:	d7 de       	rcall	.-594    	; 0x6c <data>
 2be:	2f e7       	ldi	r18, 0x7F	; 127
 2c0:	8a e1       	ldi	r24, 0x1A	; 26
 2c2:	96 e0       	ldi	r25, 0x06	; 6
 2c4:	21 50       	subi	r18, 0x01	; 1
 2c6:	80 40       	sbci	r24, 0x00	; 0
 2c8:	90 40       	sbci	r25, 0x00	; 0
 2ca:	e1 f7       	brne	.-8      	; 0x2c4 <check+0x242>
 2cc:	00 c0       	rjmp	.+0      	; 0x2ce <check+0x24c>
 2ce:	00 00       	nop
		_delay_ms(2000);
		i++;
 2d0:	80 91 60 00 	lds	r24, 0x0060
 2d4:	90 91 61 00 	lds	r25, 0x0061
 2d8:	01 96       	adiw	r24, 0x01	; 1
 2da:	90 93 61 00 	sts	0x0061, r25
 2de:	80 93 60 00 	sts	0x0060, r24
	}

	if(i==16)
 2e2:	80 91 60 00 	lds	r24, 0x0060
 2e6:	90 91 61 00 	lds	r25, 0x0061
 2ea:	40 97       	sbiw	r24, 0x10	; 16
 2ec:	31 f4       	brne	.+12     	; 0x2fa <check+0x278>
	{
		i=0;
 2ee:	10 92 61 00 	sts	0x0061, r1
 2f2:	10 92 60 00 	sts	0x0060, r1
		command(0x01);
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	a7 de       	rcall	.-690    	; 0x48 <command>
 2fa:	08 95       	ret

000002fc <main>:
void data(unsigned char a);

void check();		//keypad button press check
int main(void)
{
	DDRD=0x0f;
 2fc:	8f e0       	ldi	r24, 0x0F	; 15
 2fe:	81 bb       	out	0x11, r24	; 17
	DDRC=0Xff;
 300:	8f ef       	ldi	r24, 0xFF	; 255
 302:	84 bb       	out	0x14, r24	; 20
	DDRB=0xff;
 304:	87 bb       	out	0x17, r24	; 23
	lcd_init();
 306:	ab de       	rcall	.-682    	; 0x5e <lcd_init>
	
    while(1)
    {
		PORTD=0xf0;			//ROWS will be given 0 and COLUMNS will be given 1
 308:	c0 ef       	ldi	r28, 0xF0	; 240
 30a:	c2 bb       	out	0x12, r28	; 18
							//COLUMNS are assigned as i/p so they will monitor weather i/p data is high or not
							//Rows are assigned as o/p and will logically assign LOW to the respective COLUMN when key is pressed
		if((PIND & 0xf0)!=0xf0);
 30c:	80 b3       	in	r24, 0x10	; 16
		{
			check();		
 30e:	b9 de       	rcall	.-654    	; 0x82 <check>
 310:	fc cf       	rjmp	.-8      	; 0x30a <main+0xe>

00000312 <_exit>:
 312:	f8 94       	cli

00000314 <__stop_program>:
 314:	ff cf       	rjmp	.-2      	; 0x314 <__stop_program>
