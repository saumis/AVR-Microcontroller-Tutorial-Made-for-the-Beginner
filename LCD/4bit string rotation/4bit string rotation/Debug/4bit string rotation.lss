
4bit string rotation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  000000f0  00000164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000172  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000050  00000000  00000000  000001a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000361  00000000  00000000  000001f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000164  00000000  00000000  00000553  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001bd  00000000  00000000  000006b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000a0  00000000  00000000  00000874  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001b6  00000000  00000000  00000914  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000001ff  00000000  00000000  00000aca  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000040  00000000  00000000  00000cc9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e0 ef       	ldi	r30, 0xF0	; 240
  3a:	f0 e0       	ldi	r31, 0x00	; 0
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	ae 36       	cpi	r26, 0x6E	; 110
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>
  48:	43 d0       	rcall	.+134    	; 0xd0 <main>
  4a:	50 c0       	rjmp	.+160    	; 0xec <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <command_shift>:
	//z=a & 0xf0;
	data_shift(z);
}
void command_shift(unsigned char b)					// to give command to LCD like which position we want to show data
{
	PORTD = b;
  4e:	82 bb       	out	0x12, r24	; 18
	PORTD &= ~(1<<rs);
  50:	90 98       	cbi	0x12, 0	; 18
	PORTD |= (1<<en);
  52:	91 9a       	sbi	0x12, 1	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  54:	89 ef       	ldi	r24, 0xF9	; 249
  56:	90 e0       	ldi	r25, 0x00	; 0
  58:	01 97       	sbiw	r24, 0x01	; 1
  5a:	f1 f7       	brne	.-4      	; 0x58 <command_shift+0xa>
  5c:	00 c0       	rjmp	.+0      	; 0x5e <command_shift+0x10>
  5e:	00 00       	nop
	_delay_ms(1);
	PORTD &= ~(1<<en);
  60:	91 98       	cbi	0x12, 1	; 18
  62:	08 95       	ret

00000064 <command>:
	command(0x0c);						//to hide cursor
	//command(0x0e);						//to show cursor
	//command(0x01);						//to clear LCD completely
}
void command(unsigned char a)
{
  64:	cf 93       	push	r28
  66:	c8 2f       	mov	r28, r24
	char z;
	z=a & 0xf0;
	command_shift(z);
  68:	80 7f       	andi	r24, 0xF0	; 240
  6a:	f1 df       	rcall	.-30     	; 0x4e <command_shift>
	z=((a<<4) & 0xf0);
	//z=a & 0xf0;
	command_shift(z);
  6c:	8c 2f       	mov	r24, r28
  6e:	82 95       	swap	r24
  70:	80 7f       	andi	r24, 0xF0	; 240
  72:	ed df       	rcall	.-38     	; 0x4e <command_shift>
}
  74:	cf 91       	pop	r28
  76:	08 95       	ret

00000078 <lcd_init>:


// func declaration
void lcd_init()							// to initialize LCD
{
	command(0x02);						//4bit LCD select
  78:	82 e0       	ldi	r24, 0x02	; 2
  7a:	f4 df       	rcall	.-24     	; 0x64 <command>
	command(0x28);						//LCD init basic command(4bit LCD, 2 lines, 5X7
  7c:	88 e2       	ldi	r24, 0x28	; 40
  7e:	f2 df       	rcall	.-28     	; 0x64 <command>
	command(0x06);						//LCD init basic command
  80:	86 e0       	ldi	r24, 0x06	; 6
  82:	f0 df       	rcall	.-32     	; 0x64 <command>
	command(0x0c);						//to hide cursor
  84:	8c e0       	ldi	r24, 0x0C	; 12
  86:	ee df       	rcall	.-36     	; 0x64 <command>
  88:	08 95       	ret

0000008a <data_shift>:
	_delay_ms(1);
	PORTD &= ~(1<<en);
}
void data_shift(unsigned char b)
{
	PORTD = b;
  8a:	82 bb       	out	0x12, r24	; 18
	PORTD |= (1<<rs);
  8c:	90 9a       	sbi	0x12, 0	; 18
	PORTD |= (1<<en);
  8e:	91 9a       	sbi	0x12, 1	; 18
  90:	89 ef       	ldi	r24, 0xF9	; 249
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	01 97       	sbiw	r24, 0x01	; 1
  96:	f1 f7       	brne	.-4      	; 0x94 <data_shift+0xa>
  98:	00 c0       	rjmp	.+0      	; 0x9a <data_shift+0x10>
  9a:	00 00       	nop
	_delay_ms(1);
	PORTD &= ~(1<<en);
  9c:	91 98       	cbi	0x12, 1	; 18
  9e:	08 95       	ret

000000a0 <data>:
	z=((a<<4) & 0xf0);
	//z=a & 0xf0;
	command_shift(z);
}
void data(unsigned char a)
{
  a0:	cf 93       	push	r28
  a2:	c8 2f       	mov	r28, r24
	char z;
	z=a & 0xf0;
	data_shift(z);
  a4:	80 7f       	andi	r24, 0xF0	; 240
  a6:	f1 df       	rcall	.-30     	; 0x8a <data_shift>
	z=((a<<4) & 0xf0);
	//z=a & 0xf0;
	data_shift(z);
  a8:	8c 2f       	mov	r24, r28
  aa:	82 95       	swap	r24
  ac:	80 7f       	andi	r24, 0xF0	; 240
  ae:	ed df       	rcall	.-38     	; 0x8a <data_shift>
}
  b0:	cf 91       	pop	r28
  b2:	08 95       	ret

000000b4 <string>:
	PORTD |= (1<<en);
	_delay_ms(1);
	PORTD &= ~(1<<en);
}
void string( char *p)
{
  b4:	cf 93       	push	r28
  b6:	df 93       	push	r29
  b8:	ec 01       	movw	r28, r24
	
	while(*p!= '\0')
  ba:	88 81       	ld	r24, Y
  bc:	88 23       	and	r24, r24
  be:	29 f0       	breq	.+10     	; 0xca <string+0x16>
  c0:	21 96       	adiw	r28, 0x01	; 1
	{
		data(*p);
  c2:	ee df       	rcall	.-36     	; 0xa0 <data>
	PORTD &= ~(1<<en);
}
void string( char *p)
{
	
	while(*p!= '\0')
  c4:	89 91       	ld	r24, Y+
  c6:	81 11       	cpse	r24, r1
  c8:	fc cf       	rjmp	.-8      	; 0xc2 <string+0xe>
	{
		data(*p);
		*p++;
	}
  ca:	df 91       	pop	r29
  cc:	cf 91       	pop	r28
  ce:	08 95       	ret

000000d0 <main>:
void string( char *p);

int main(void)
{
	
	DDRD=0xff;		// initialize data port(D4 to D7 as o/p pins)... any change in the port will require change of port name in place of PORTD in command and data function defination as well
  d0:	8f ef       	ldi	r24, 0xFF	; 255
  d2:	81 bb       	out	0x11, r24	; 17
	
	lcd_init();
  d4:	d1 df       	rcall	.-94     	; 0x78 <lcd_init>
	
	string("ADITYA");
  d6:	80 e6       	ldi	r24, 0x60	; 96
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	ec df       	rcall	.-40     	; 0xb4 <string>
	command(0xc0);
  dc:	80 ec       	ldi	r24, 0xC0	; 192
  de:	c2 df       	rcall	.-124    	; 0x64 <command>
	string("MUDGAL");
  e0:	87 e6       	ldi	r24, 0x67	; 103
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	e7 df       	rcall	.-50     	; 0xb4 <string>
	

}
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	08 95       	ret

000000ec <_exit>:
  ec:	f8 94       	cli

000000ee <__stop_program>:
  ee:	ff cf       	rjmp	.-2      	; 0xee <__stop_program>
