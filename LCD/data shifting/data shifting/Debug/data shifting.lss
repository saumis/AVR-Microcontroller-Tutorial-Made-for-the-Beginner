
data shifting.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000110  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  00000110  00000184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000038  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000002c2  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000189  00000000  00000000  000004ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001a7  00000000  00000000  00000657  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000064  00000000  00000000  00000800  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000018a  00000000  00000000  00000864  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000a9  00000000  00000000  000009ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000028  00000000  00000000  00000a97  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e0 e1       	ldi	r30, 0x10	; 16
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a0 38       	cpi	r26, 0x80	; 128
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>
  48:	21 d0       	rcall	.+66     	; 0x8c <main>
  4a:	60 c0       	rjmp	.+192    	; 0x10c <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <command>:
	//command(0x0e);						//to show cursor
	command(0x01);						//to clear LCD completely
}
void command(unsigned char a)					// to give command to LCD like which position we want to show data
{
	PORTD=a;							// to send value of a to data pins
  4e:	82 bb       	out	0x12, r24	; 18
	PORTB &= 0xfe;						//Rs = 0	 to tell LCD that value on data pin is command
  50:	c0 98       	cbi	0x18, 0	; 24
	PORTB |=0x02;						//Enable=1 to get data transfer pulse(logic 1)
  52:	c1 9a       	sbi	0x18, 1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  54:	83 ec       	ldi	r24, 0xC3	; 195
  56:	99 e0       	ldi	r25, 0x09	; 9
  58:	01 97       	sbiw	r24, 0x01	; 1
  5a:	f1 f7       	brne	.-4      	; 0x58 <command+0xa>
  5c:	00 c0       	rjmp	.+0      	; 0x5e <command+0x10>
  5e:	00 00       	nop
	_delay_ms(10);
	PORTB &=0xfd;						//Enable=0 to get data transfer pulse(logic 0)
  60:	c1 98       	cbi	0x18, 1	; 24
  62:	08 95       	ret

00000064 <lcd_init>:


// func declaration
void lcd_init()							// to initialize LCD
{
	command(0x38);						//LCD init basic command
  64:	88 e3       	ldi	r24, 0x38	; 56
  66:	f3 df       	rcall	.-26     	; 0x4e <command>
	command(0x06);						//LCD init basic command
  68:	86 e0       	ldi	r24, 0x06	; 6
  6a:	f1 df       	rcall	.-30     	; 0x4e <command>
	command(0x0c);						//to hide cursor
  6c:	8c e0       	ldi	r24, 0x0C	; 12
  6e:	ef df       	rcall	.-34     	; 0x4e <command>
	//command(0x0e);						//to show cursor
	command(0x01);						//to clear LCD completely
  70:	81 e0       	ldi	r24, 0x01	; 1
  72:	ed df       	rcall	.-38     	; 0x4e <command>
  74:	08 95       	ret

00000076 <data>:
	_delay_ms(10);
	PORTB &=0xfd;						//Enable=0 to get data transfer pulse(logic 0)
}
void data(unsigned char a)
{
	PORTD=a;
  76:	82 bb       	out	0x12, r24	; 18
	PORTB |=0x01;						// Rs=1	to tell LCD that value on data pins is DATA
  78:	c0 9a       	sbi	0x18, 0	; 24
	PORTB |=0x02;
  7a:	c1 9a       	sbi	0x18, 1	; 24
  7c:	83 ec       	ldi	r24, 0xC3	; 195
  7e:	99 e0       	ldi	r25, 0x09	; 9
  80:	01 97       	sbiw	r24, 0x01	; 1
  82:	f1 f7       	brne	.-4      	; 0x80 <data+0xa>
  84:	00 c0       	rjmp	.+0      	; 0x86 <data+0x10>
  86:	00 00       	nop
	_delay_ms(10);
	PORTB &=0xfd;
  88:	c1 98       	cbi	0x18, 1	; 24
  8a:	08 95       	ret

0000008c <main>:
void lcd_init();
void command(unsigned char a);
void data(unsigned char a);

int main(void)
{
  8c:	cf 93       	push	r28
  8e:	df 93       	push	r29
  90:	cd b7       	in	r28, 0x3d	; 61
  92:	de b7       	in	r29, 0x3e	; 62
  94:	a0 97       	sbiw	r28, 0x20	; 32
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	f8 94       	cli
  9a:	de bf       	out	0x3e, r29	; 62
  9c:	0f be       	out	0x3f, r0	; 63
  9e:	cd bf       	out	0x3d, r28	; 61
	DDRD=0xff;		// initialize data port... any change in the port will require change of port name in place of PORTD in command and data function defination as well
  a0:	8f ef       	ldi	r24, 0xFF	; 255
  a2:	81 bb       	out	0x11, r24	; 17
	DDRB|=0x03;		// initialize the port and pins on which Rs and E(enable) has to get connected..... any change in this will change the value of PORTB in command and data function defination
  a4:	87 b3       	in	r24, 0x17	; 23
  a6:	83 60       	ori	r24, 0x03	; 3
  a8:	87 bb       	out	0x17, r24	; 23
	lcd_init();
  aa:	dc df       	rcall	.-72     	; 0x64 <lcd_init>
	int a[16]={0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8a,0x8b,0x8c,0x8d,0x8e,0x8f};
  ac:	80 e2       	ldi	r24, 0x20	; 32
  ae:	e0 e6       	ldi	r30, 0x60	; 96
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	de 01       	movw	r26, r28
  b4:	11 96       	adiw	r26, 0x01	; 1
  b6:	01 90       	ld	r0, Z+
  b8:	0d 92       	st	X+, r0
  ba:	8a 95       	dec	r24
  bc:	e1 f7       	brne	.-8      	; 0xb6 <main+0x2a>
	while(1)
	{
		for(int i=0;i<16;i++)
  be:	00 e0       	ldi	r16, 0x00	; 0
  c0:	10 e0       	ldi	r17, 0x00	; 0
  c2:	d1 2c       	mov	r13, r1
  c4:	e1 2c       	mov	r14, r1
		{
			command(a[i]);
  c6:	f8 01       	movw	r30, r16
  c8:	ee 0f       	add	r30, r30
  ca:	ff 1f       	adc	r31, r31
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	8c 0f       	add	r24, r28
  d2:	9d 1f       	adc	r25, r29
  d4:	e8 0f       	add	r30, r24
  d6:	f9 1f       	adc	r31, r25
  d8:	f0 80       	ld	r15, Z
  da:	8f 2d       	mov	r24, r15
  dc:	b8 df       	rcall	.-144    	; 0x4e <command>
			data('A');
  de:	81 e4       	ldi	r24, 0x41	; 65
  e0:	ca df       	rcall	.-108    	; 0x76 <data>
  e2:	9f e9       	ldi	r25, 0x9F	; 159
  e4:	26 e8       	ldi	r18, 0x86	; 134
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	91 50       	subi	r25, 0x01	; 1
  ea:	20 40       	sbci	r18, 0x00	; 0
  ec:	80 40       	sbci	r24, 0x00	; 0
  ee:	e1 f7       	brne	.-8      	; 0xe8 <main+0x5c>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <main+0x66>
  f2:	00 00       	nop
			_delay_ms(500);
			command(a[i]);
  f4:	8f 2d       	mov	r24, r15
  f6:	ab df       	rcall	.-170    	; 0x4e <command>
			data(' ');
  f8:	80 e2       	ldi	r24, 0x20	; 32
  fa:	bd df       	rcall	.-134    	; 0x76 <data>
	DDRB|=0x03;		// initialize the port and pins on which Rs and E(enable) has to get connected..... any change in this will change the value of PORTB in command and data function defination
	lcd_init();
	int a[16]={0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8a,0x8b,0x8c,0x8d,0x8e,0x8f};
	while(1)
	{
		for(int i=0;i<16;i++)
  fc:	0f 5f       	subi	r16, 0xFF	; 255
  fe:	1f 4f       	sbci	r17, 0xFF	; 255
 100:	00 31       	cpi	r16, 0x10	; 16
 102:	11 05       	cpc	r17, r1
 104:	04 f3       	brlt	.-64     	; 0xc6 <main+0x3a>
 106:	0d 2d       	mov	r16, r13
 108:	1e 2d       	mov	r17, r14
 10a:	dd cf       	rjmp	.-70     	; 0xc6 <main+0x3a>

0000010c <_exit>:
 10c:	f8 94       	cli

0000010e <__stop_program>:
 10e:	ff cf       	rjmp	.-2      	; 0x10e <__stop_program>
