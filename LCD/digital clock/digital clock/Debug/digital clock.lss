
digital clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000290  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00000290  00000304  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000312  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000038  00000000  00000000  00000342  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000528  00000000  00000000  0000037a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000190  00000000  00000000  000008a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001d7  00000000  00000000  00000a32  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000064  00000000  00000000  00000c0c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000018a  00000000  00000000  00000c70  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000042d  00000000  00000000  00000dfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000100  00000000  00000000  00001227  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e0 e9       	ldi	r30, 0x90	; 144
  3a:	f2 e0       	ldi	r31, 0x02	; 2
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	ae 36       	cpi	r26, 0x6E	; 110
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>
  48:	21 d0       	rcall	.+66     	; 0x8c <main>
  4a:	20 c1       	rjmp	.+576    	; 0x28c <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <command>:
	//command(0x0e);						//to show cursor
	command(0x01);						//to clear LCD completely
}
void command(unsigned char a)					// to give command to LCD like which position we want to show data
{
	PORTD=a;						// to send value of a to data pins
  4e:	82 bb       	out	0x12, r24	; 18
	PORTB &= 0xfe;						//Rs = 0	 to tell LCD that value on data pin is command
  50:	c0 98       	cbi	0x18, 0	; 24
	PORTB |=0x02;						//Enable=1 to get data transfer pulse(logic 1)
  52:	c1 9a       	sbi	0x18, 1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  54:	83 ec       	ldi	r24, 0xC3	; 195
  56:	99 e0       	ldi	r25, 0x09	; 9
  58:	01 97       	sbiw	r24, 0x01	; 1
  5a:	f1 f7       	brne	.-4      	; 0x58 <command+0xa>
  5c:	00 c0       	rjmp	.+0      	; 0x5e <command+0x10>
  5e:	00 00       	nop
	_delay_ms(10);
	PORTB &=0xfd;						//Enable=0 to get data transfer pulse(logic 0)
  60:	c1 98       	cbi	0x18, 1	; 24
  62:	08 95       	ret

00000064 <lcd_init>:


// func declaration
void lcd_init()							// to initialize LCD
{
	command(0x38);						//LCD init basic command
  64:	88 e3       	ldi	r24, 0x38	; 56
  66:	f3 df       	rcall	.-26     	; 0x4e <command>
	command(0x06);						//LCD init basic command
  68:	86 e0       	ldi	r24, 0x06	; 6
  6a:	f1 df       	rcall	.-30     	; 0x4e <command>
	command(0x0c);						//to hide cursor
  6c:	8c e0       	ldi	r24, 0x0C	; 12
  6e:	ef df       	rcall	.-34     	; 0x4e <command>
	//command(0x0e);						//to show cursor
	command(0x01);						//to clear LCD completely
  70:	81 e0       	ldi	r24, 0x01	; 1
  72:	ed df       	rcall	.-38     	; 0x4e <command>
  74:	08 95       	ret

00000076 <data>:
	_delay_ms(10);
	PORTB &=0xfd;						//Enable=0 to get data transfer pulse(logic 0)
}
void data(unsigned char a)
{
	PORTD=a;
  76:	82 bb       	out	0x12, r24	; 18
	PORTB |=0x01;						// Rs=1	to tell LCD that value on data pins is DATA
  78:	c0 9a       	sbi	0x18, 0	; 24
	PORTB |=0x02;
  7a:	c1 9a       	sbi	0x18, 1	; 24
  7c:	83 ec       	ldi	r24, 0xC3	; 195
  7e:	99 e0       	ldi	r25, 0x09	; 9
  80:	01 97       	sbiw	r24, 0x01	; 1
  82:	f1 f7       	brne	.-4      	; 0x80 <data+0xa>
  84:	00 c0       	rjmp	.+0      	; 0x86 <data+0x10>
  86:	00 00       	nop
	_delay_ms(10);
	PORTB &=0xfd;
  88:	c1 98       	cbi	0x18, 1	; 24
  8a:	08 95       	ret

0000008c <main>:
void lcd_init();
void command(unsigned char a);
void data(unsigned char a);

int main(void)
{
  8c:	cf 93       	push	r28
  8e:	df 93       	push	r29
  90:	cd b7       	in	r28, 0x3d	; 61
  92:	de b7       	in	r29, 0x3e	; 62
  94:	6b 97       	sbiw	r28, 0x1b	; 27
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	f8 94       	cli
  9a:	de bf       	out	0x3e, r29	; 62
  9c:	0f be       	out	0x3f, r0	; 63
  9e:	cd bf       	out	0x3d, r28	; 61
	DDRD=0xff;		// initialize data port... any change in the port will require change of port name in place of PORTD in command and data function defination as well
  a0:	8f ef       	ldi	r24, 0xFF	; 255
  a2:	81 bb       	out	0x11, r24	; 17
	DDRB|=0x03;		// initialize the port and pins on which Rs and E(enable) has to get connected..... any change in this will change the value of PORTB in command and data function defination
  a4:	87 b3       	in	r24, 0x17	; 23
  a6:	83 60       	ori	r24, 0x03	; 3
  a8:	87 bb       	out	0x17, r24	; 23
	lcd_init();
  aa:	dc df       	rcall	.-72     	; 0x64 <lcd_init>
	char a[13]={'0','1','2','3','4','5','6','7','8','9','0','1','2'};
  ac:	8d e0       	ldi	r24, 0x0D	; 13
  ae:	e0 e6       	ldi	r30, 0x60	; 96
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	de 01       	movw	r26, r28
  b4:	11 96       	adiw	r26, 0x01	; 1
  b6:	01 90       	ld	r0, Z+
  b8:	0d 92       	st	X+, r0
  ba:	8a 95       	dec	r24
  bc:	e1 f7       	brne	.-8      	; 0xb6 <main+0x2a>
						data(a[l]);
						for(int m=0;m<6;m++)
						{
							command(0x8a);
							data(a[m]);
							for(int n=0;n<10;n++)
  be:	21 e0       	ldi	r18, 0x01	; 1
  c0:	2a 8b       	std	Y+18, r18	; 0x12
  c2:	1b 8a       	std	Y+19, r1	; 0x13
  c4:	2c 8b       	std	Y+20, r18	; 0x14
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	8d 8b       	std	Y+21, r24	; 0x15
  ca:	2e 8b       	std	Y+22, r18	; 0x16
  cc:	8f 8b       	std	Y+23, r24	; 0x17
  ce:	28 8f       	std	Y+24, r18	; 0x18
  d0:	89 8f       	std	Y+25, r24	; 0x19
  d2:	44 24       	eor	r4, r4
  d4:	43 94       	inc	r4
  d6:	51 2c       	mov	r5, r1
	DDRB|=0x03;		// initialize the port and pins on which Rs and E(enable) has to get connected..... any change in this will change the value of PORTB in command and data function defination
	lcd_init();
	char a[13]={'0','1','2','3','4','5','6','7','8','9','0','1','2'};
	while(1)
	{
		command(0x84);		//1st row 5th posi
  d8:	84 e8       	ldi	r24, 0x84	; 132
  da:	b9 df       	rcall	.-142    	; 0x4e <command>
		data('0');
  dc:	80 e3       	ldi	r24, 0x30	; 48
  de:	cb df       	rcall	.-106    	; 0x76 <data>
		command(0x85);
  e0:	85 e8       	ldi	r24, 0x85	; 133
  e2:	b5 df       	rcall	.-150    	; 0x4e <command>
		data('0');
  e4:	80 e3       	ldi	r24, 0x30	; 48
  e6:	c7 df       	rcall	.-114    	; 0x76 <data>
		command(0x86);
  e8:	86 e8       	ldi	r24, 0x86	; 134
  ea:	b1 df       	rcall	.-158    	; 0x4e <command>
		data(':');
  ec:	8a e3       	ldi	r24, 0x3A	; 58
  ee:	c3 df       	rcall	.-122    	; 0x76 <data>
		command(0x87);
  f0:	87 e8       	ldi	r24, 0x87	; 135
  f2:	ad df       	rcall	.-166    	; 0x4e <command>
		data('0');
  f4:	80 e3       	ldi	r24, 0x30	; 48
  f6:	bf df       	rcall	.-130    	; 0x76 <data>
		command(0x88);
  f8:	88 e8       	ldi	r24, 0x88	; 136
  fa:	a9 df       	rcall	.-174    	; 0x4e <command>
		data('0');
  fc:	80 e3       	ldi	r24, 0x30	; 48
  fe:	bb df       	rcall	.-138    	; 0x76 <data>
		command(0x89);
 100:	89 e8       	ldi	r24, 0x89	; 137
 102:	a5 df       	rcall	.-182    	; 0x4e <command>
		data(':');
 104:	8a e3       	ldi	r24, 0x3A	; 58
 106:	b7 df       	rcall	.-146    	; 0x76 <data>
		command(0x8a);
 108:	8a e8       	ldi	r24, 0x8A	; 138
 10a:	a1 df       	rcall	.-190    	; 0x4e <command>
		data('0');
 10c:	80 e3       	ldi	r24, 0x30	; 48
 10e:	b3 df       	rcall	.-154    	; 0x76 <data>
		command(0x8b);
 110:	8b e8       	ldi	r24, 0x8B	; 139
 112:	9d df       	rcall	.-198    	; 0x4e <command>
		data('0');
 114:	80 e3       	ldi	r24, 0x30	; 48
 116:	af df       	rcall	.-162    	; 0x76 <data>
		
		for(int i=0;i<2;i++)
 118:	61 2c       	mov	r6, r1
 11a:	71 2c       	mov	r7, r1
						data(a[l]);
						for(int m=0;m<6;m++)
						{
							command(0x8a);
							data(a[m]);
							for(int n=0;n<10;n++)
 11c:	18 8a       	std	Y+16, r1	; 0x10
 11e:	19 8a       	std	Y+17, r1	; 0x11
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	9e 87       	std	Y+14, r25	; 0x0e
 124:	20 e0       	ldi	r18, 0x00	; 0
 126:	2f 87       	std	Y+15, r18	; 0x0f
 128:	03 c0       	rjmp	.+6      	; 0x130 <main+0xa4>
		command(0x8a);
		data('0');
		command(0x8b);
		data('0');
		
		for(int i=0;i<2;i++)
 12a:	66 24       	eor	r6, r6
 12c:	63 94       	inc	r6
 12e:	71 2c       	mov	r7, r1
		{
			command(0x84);
 130:	84 e8       	ldi	r24, 0x84	; 132
 132:	8d df       	rcall	.-230    	; 0x4e <command>
			data(a[i]);
 134:	e1 e0       	ldi	r30, 0x01	; 1
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	ec 0f       	add	r30, r28
 13a:	fd 1f       	adc	r31, r29
 13c:	e6 0d       	add	r30, r6
 13e:	f7 1d       	adc	r31, r7
 140:	80 81       	ld	r24, Z
 142:	99 df       	rcall	.-206    	; 0x76 <data>
			for(int j=0;j<13;j++)
 144:	81 2c       	mov	r8, r1
 146:	91 2c       	mov	r9, r1
						data(a[l]);
						for(int m=0;m<6;m++)
						{
							command(0x8a);
							data(a[m]);
							for(int n=0;n<10;n++)
 148:	2e 84       	ldd	r2, Y+14	; 0x0e
 14a:	3f 84       	ldd	r3, Y+15	; 0x0f
 14c:	7b 8e       	std	Y+27, r7	; 0x1b
 14e:	6a 8e       	std	Y+26, r6	; 0x1a
 150:	78 8c       	ldd	r7, Y+24	; 0x18
 152:	69 8c       	ldd	r6, Y+25	; 0x19
 154:	02 c0       	rjmp	.+4      	; 0x15a <main+0xce>
		
		for(int i=0;i<2;i++)
		{
			command(0x84);
			data(a[i]);
			for(int j=0;j<13;j++)
 156:	8a 88       	ldd	r8, Y+18	; 0x12
 158:	9b 88       	ldd	r9, Y+19	; 0x13
			{
				command(0x85);
 15a:	85 e8       	ldi	r24, 0x85	; 133
 15c:	78 df       	rcall	.-272    	; 0x4e <command>
				data(a[j]);
 15e:	e1 e0       	ldi	r30, 0x01	; 1
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	ec 0f       	add	r30, r28
 164:	fd 1f       	adc	r31, r29
 166:	e8 0d       	add	r30, r8
 168:	f9 1d       	adc	r31, r9
 16a:	80 81       	ld	r24, Z
 16c:	84 df       	rcall	.-248    	; 0x76 <data>
				for(int k=0;k<6;k++)
 16e:	a8 88       	ldd	r10, Y+16	; 0x10
 170:	b9 88       	ldd	r11, Y+17	; 0x11
 172:	02 c0       	rjmp	.+4      	; 0x178 <main+0xec>
 174:	ac 88       	ldd	r10, Y+20	; 0x14
 176:	bd 88       	ldd	r11, Y+21	; 0x15
				{
					command(0x87);
 178:	87 e8       	ldi	r24, 0x87	; 135
 17a:	69 df       	rcall	.-302    	; 0x4e <command>
					data(a[k]);
 17c:	e1 e0       	ldi	r30, 0x01	; 1
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	ec 0f       	add	r30, r28
 182:	fd 1f       	adc	r31, r29
 184:	ea 0d       	add	r30, r10
 186:	fb 1d       	adc	r31, r11
 188:	80 81       	ld	r24, Z
 18a:	75 df       	rcall	.-278    	; 0x76 <data>
					for(int l=0;l<10;l++)
 18c:	ce 84       	ldd	r12, Y+14	; 0x0e
 18e:	df 84       	ldd	r13, Y+15	; 0x0f
 190:	02 c0       	rjmp	.+4      	; 0x196 <main+0x10a>
 192:	ce 88       	ldd	r12, Y+22	; 0x16
 194:	df 88       	ldd	r13, Y+23	; 0x17
					{
						command(0x88);
 196:	88 e8       	ldi	r24, 0x88	; 136
 198:	5a df       	rcall	.-332    	; 0x4e <command>
						data(a[l]);
 19a:	e1 e0       	ldi	r30, 0x01	; 1
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	ec 0f       	add	r30, r28
 1a0:	fd 1f       	adc	r31, r29
 1a2:	ec 0d       	add	r30, r12
 1a4:	fd 1d       	adc	r31, r13
 1a6:	80 81       	ld	r24, Z
 1a8:	66 df       	rcall	.-308    	; 0x76 <data>
						for(int m=0;m<6;m++)
 1aa:	ee 84       	ldd	r14, Y+14	; 0x0e
 1ac:	ff 84       	ldd	r15, Y+15	; 0x0f
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <main+0x128>
 1b0:	e7 2c       	mov	r14, r7
 1b2:	f6 2c       	mov	r15, r6
						{
							command(0x8a);
 1b4:	8a e8       	ldi	r24, 0x8A	; 138
 1b6:	4b df       	rcall	.-362    	; 0x4e <command>
							data(a[m]);
 1b8:	e1 e0       	ldi	r30, 0x01	; 1
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	ec 0f       	add	r30, r28
 1be:	fd 1f       	adc	r31, r29
 1c0:	ee 0d       	add	r30, r14
 1c2:	ff 1d       	adc	r31, r15
 1c4:	80 81       	ld	r24, Z
 1c6:	57 df       	rcall	.-338    	; 0x76 <data>
							for(int n=0;n<10;n++)
 1c8:	02 2d       	mov	r16, r2
 1ca:	13 2d       	mov	r17, r3
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <main+0x146>
 1ce:	04 2d       	mov	r16, r4
 1d0:	15 2d       	mov	r17, r5
							{
								command(0x8b);
 1d2:	8b e8       	ldi	r24, 0x8B	; 139
 1d4:	3c df       	rcall	.-392    	; 0x4e <command>
								data(a[n]);
 1d6:	e1 e0       	ldi	r30, 0x01	; 1
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	ec 0f       	add	r30, r28
 1dc:	fd 1f       	adc	r31, r29
 1de:	e0 0f       	add	r30, r16
 1e0:	f1 1f       	adc	r31, r17
 1e2:	80 81       	ld	r24, Z
 1e4:	48 df       	rcall	.-368    	; 0x76 <data>
 1e6:	8f e7       	ldi	r24, 0x7F	; 127
 1e8:	9f e4       	ldi	r25, 0x4F	; 79
 1ea:	22 e1       	ldi	r18, 0x12	; 18
 1ec:	81 50       	subi	r24, 0x01	; 1
 1ee:	90 40       	sbci	r25, 0x00	; 0
 1f0:	20 40       	sbci	r18, 0x00	; 0
 1f2:	e1 f7       	brne	.-8      	; 0x1ec <main+0x160>
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <main+0x16a>
 1f6:	00 00       	nop
								_delay_ms(6000);
								if(n==10)
 1f8:	0a 30       	cpi	r16, 0x0A	; 10
 1fa:	11 05       	cpc	r17, r1
 1fc:	41 f3       	breq	.-48     	; 0x1ce <main+0x142>
						data(a[l]);
						for(int m=0;m<6;m++)
						{
							command(0x8a);
							data(a[m]);
							for(int n=0;n<10;n++)
 1fe:	0f 5f       	subi	r16, 0xFF	; 255
 200:	1f 4f       	sbci	r17, 0xFF	; 255
 202:	0a 30       	cpi	r16, 0x0A	; 10
 204:	11 05       	cpc	r17, r1
 206:	2c f3       	brlt	.-54     	; 0x1d2 <main+0x146>
								_delay_ms(6000);
								if(n==10)
								n=0;
								//	command(0x01);					// clear LCD
							}
							if(m==6)
 208:	86 e0       	ldi	r24, 0x06	; 6
 20a:	e8 16       	cp	r14, r24
 20c:	f1 04       	cpc	r15, r1
 20e:	81 f2       	breq	.-96     	; 0x1b0 <main+0x124>
					data(a[k]);
					for(int l=0;l<10;l++)
					{
						command(0x88);
						data(a[l]);
						for(int m=0;m<6;m++)
 210:	9f ef       	ldi	r25, 0xFF	; 255
 212:	e9 1a       	sub	r14, r25
 214:	f9 0a       	sbc	r15, r25
 216:	26 e0       	ldi	r18, 0x06	; 6
 218:	e2 16       	cp	r14, r18
 21a:	f1 04       	cpc	r15, r1
 21c:	5c f2       	brlt	.-106    	; 0x1b4 <main+0x128>
								//	command(0x01);					// clear LCD
							}
							if(m==6)
							m=0;
						}
						if(l==10)
 21e:	8a e0       	ldi	r24, 0x0A	; 10
 220:	c8 16       	cp	r12, r24
 222:	d1 04       	cpc	r13, r1
 224:	09 f4       	brne	.+2      	; 0x228 <main+0x19c>
 226:	b5 cf       	rjmp	.-150    	; 0x192 <main+0x106>
				data(a[j]);
				for(int k=0;k<6;k++)
				{
					command(0x87);
					data(a[k]);
					for(int l=0;l<10;l++)
 228:	9f ef       	ldi	r25, 0xFF	; 255
 22a:	c9 1a       	sub	r12, r25
 22c:	d9 0a       	sbc	r13, r25
 22e:	2a e0       	ldi	r18, 0x0A	; 10
 230:	c2 16       	cp	r12, r18
 232:	d1 04       	cpc	r13, r1
 234:	0c f4       	brge	.+2      	; 0x238 <main+0x1ac>
 236:	af cf       	rjmp	.-162    	; 0x196 <main+0x10a>
							m=0;
						}
						if(l==10)
						l=0;
					}
					if(k==6)
 238:	86 e0       	ldi	r24, 0x06	; 6
 23a:	a8 16       	cp	r10, r24
 23c:	b1 04       	cpc	r11, r1
 23e:	09 f4       	brne	.+2      	; 0x242 <main+0x1b6>
 240:	99 cf       	rjmp	.-206    	; 0x174 <main+0xe8>
			data(a[i]);
			for(int j=0;j<13;j++)
			{
				command(0x85);
				data(a[j]);
				for(int k=0;k<6;k++)
 242:	9f ef       	ldi	r25, 0xFF	; 255
 244:	a9 1a       	sub	r10, r25
 246:	b9 0a       	sbc	r11, r25
 248:	26 e0       	ldi	r18, 0x06	; 6
 24a:	a2 16       	cp	r10, r18
 24c:	b1 04       	cpc	r11, r1
 24e:	0c f4       	brge	.+2      	; 0x252 <main+0x1c6>
 250:	93 cf       	rjmp	.-218    	; 0x178 <main+0xec>
						l=0;
					}
					if(k==6)
					k=0;
				}
				if(j==13)
 252:	8d e0       	ldi	r24, 0x0D	; 13
 254:	88 16       	cp	r8, r24
 256:	91 04       	cpc	r9, r1
 258:	09 f4       	brne	.+2      	; 0x25c <main+0x1d0>
 25a:	7d cf       	rjmp	.-262    	; 0x156 <main+0xca>
		
		for(int i=0;i<2;i++)
		{
			command(0x84);
			data(a[i]);
			for(int j=0;j<13;j++)
 25c:	9f ef       	ldi	r25, 0xFF	; 255
 25e:	89 1a       	sub	r8, r25
 260:	99 0a       	sbc	r9, r25
 262:	2d e0       	ldi	r18, 0x0D	; 13
 264:	82 16       	cp	r8, r18
 266:	91 04       	cpc	r9, r1
 268:	0c f4       	brge	.+2      	; 0x26c <main+0x1e0>
 26a:	77 cf       	rjmp	.-274    	; 0x15a <main+0xce>
 26c:	6a 8c       	ldd	r6, Y+26	; 0x1a
 26e:	7b 8c       	ldd	r7, Y+27	; 0x1b
					k=0;
				}
				if(j==13)
				j=0;
			}
			if(i==2)
 270:	82 e0       	ldi	r24, 0x02	; 2
 272:	68 16       	cp	r6, r24
 274:	71 04       	cpc	r7, r1
 276:	09 f4       	brne	.+2      	; 0x27a <main+0x1ee>
 278:	58 cf       	rjmp	.-336    	; 0x12a <main+0x9e>
		command(0x8a);
		data('0');
		command(0x8b);
		data('0');
		
		for(int i=0;i<2;i++)
 27a:	9f ef       	ldi	r25, 0xFF	; 255
 27c:	69 1a       	sub	r6, r25
 27e:	79 0a       	sbc	r7, r25
 280:	22 e0       	ldi	r18, 0x02	; 2
 282:	62 16       	cp	r6, r18
 284:	71 04       	cpc	r7, r1
 286:	0c f4       	brge	.+2      	; 0x28a <main+0x1fe>
 288:	53 cf       	rjmp	.-346    	; 0x130 <main+0xa4>
 28a:	26 cf       	rjmp	.-436    	; 0xd8 <main+0x4c>

0000028c <_exit>:
 28c:	f8 94       	cli

0000028e <__stop_program>:
 28e:	ff cf       	rjmp	.-2      	; 0x28e <__stop_program>
