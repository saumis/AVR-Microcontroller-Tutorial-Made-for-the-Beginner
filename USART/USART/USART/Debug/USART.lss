
USART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000076  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000076  000000ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000ea  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000038  00000000  00000000  0000011a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000012a  00000000  00000000  00000152  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000e1  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000000f2  00000000  00000000  0000035d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000054  00000000  00000000  00000450  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000013c  00000000  00000000  000004a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000026  00000000  00000000  000005e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000028  00000000  00000000  00000606  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	0d d0       	rcall	.+26     	; 0x4e <main>
  34:	1e c0       	rjmp	.+60     	; 0x72 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <USART_Init>:
// func declaration
//USART init,transmitt, receiver
void USART_Init( unsigned int ubrr)
{
	/* Set baud rate */
	UBRRH = (unsigned char)(ubrr>>8);
  38:	90 bd       	out	0x20, r25	; 32
	UBRRL = (unsigned char)ubrr;
  3a:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSRB = (1<<RXEN)|(1<<TXEN);
  3c:	88 e1       	ldi	r24, 0x18	; 24
  3e:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit */
	UCSRC = (1<<URSEL)|(1<<USBS)|(3<<UCSZ0);
  40:	8e e8       	ldi	r24, 0x8E	; 142
  42:	80 bd       	out	0x20, r24	; 32
  44:	08 95       	ret

00000046 <USART_Receive>:
	UDR = data;
}
unsigned char USART_Receive( void )
{
	/* Wait for data to be received */
	while ( !(UCSRA & (1<<RXC)) )
  46:	5f 9b       	sbis	0x0b, 7	; 11
  48:	fe cf       	rjmp	.-4      	; 0x46 <USART_Receive>
	;
	/* Get and return received data from buffer */
	return UDR;
  4a:	8c b1       	in	r24, 0x0c	; 12
  4c:	08 95       	ret

0000004e <main>:
unsigned char USART_Receive( void );


int main(void)
{
	DDRC=0x03;
  4e:	83 e0       	ldi	r24, 0x03	; 3
  50:	84 bb       	out	0x14, r24	; 20
	USART_Init(6);
  52:	86 e0       	ldi	r24, 0x06	; 6
  54:	90 e0       	ldi	r25, 0x00	; 0
  56:	f0 df       	rcall	.-32     	; 0x38 <USART_Init>
    {
		unsigned char a=USART_Receive();
		if(a=='A')
			PORTC=0x01;
		else if(a=='B')
			PORTC=0x02;
  58:	d2 e0       	ldi	r29, 0x02	; 2
	
    while(1)
    {
		unsigned char a=USART_Receive();
		if(a=='A')
			PORTC=0x01;
  5a:	c1 e0       	ldi	r28, 0x01	; 1
	DDRC=0x03;
	USART_Init(6);
	
    while(1)
    {
		unsigned char a=USART_Receive();
  5c:	f4 df       	rcall	.-24     	; 0x46 <USART_Receive>
		if(a=='A')
  5e:	81 34       	cpi	r24, 0x41	; 65
  60:	11 f4       	brne	.+4      	; 0x66 <main+0x18>
			PORTC=0x01;
  62:	c5 bb       	out	0x15, r28	; 21
  64:	fb cf       	rjmp	.-10     	; 0x5c <main+0xe>
		else if(a=='B')
  66:	82 34       	cpi	r24, 0x42	; 66
  68:	11 f4       	brne	.+4      	; 0x6e <main+0x20>
			PORTC=0x02;
  6a:	d5 bb       	out	0x15, r29	; 21
  6c:	f7 cf       	rjmp	.-18     	; 0x5c <main+0xe>
		else
			PORTC=0x00;
  6e:	15 ba       	out	0x15, r1	; 21
  70:	f5 cf       	rjmp	.-22     	; 0x5c <main+0xe>

00000072 <_exit>:
  72:	f8 94       	cli

00000074 <__stop_program>:
  74:	ff cf       	rjmp	.-2      	; 0x74 <__stop_program>
